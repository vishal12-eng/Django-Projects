{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"ui-sans-serif\", \"system-ui\"],\n        serif: [\"var(--font-serif)\", \"ui-serif\", \"Georgia\"],\n        mono: [\"var(--font-mono)\", \"ui-monospace\", \"SFMono-Regular\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        fadeOut: {\n          from: { opacity: \"1\" },\n          to: { opacity: \"0\" },\n        },\n        slideIn: {\n          from: { transform: \"translateX(-100%)\" },\n          to: { transform: \"translateX(0)\" },\n        },\n        slideOut: {\n          from: { transform: \"translateX(0)\" },\n          to: { transform: \"translateX(-100%)\" },\n        },\n        pulse: {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.5\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-in-out\",\n        \"fade-out\": \"fadeOut 0.3s ease-in-out\",\n        \"slide-in\": \"slideIn 0.3s ease-out\",\n        \"slide-out\": \"slideOut 0.3s ease-out\",\n        pulse: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n      boxShadow: {\n        'xs': 'var(--shadow-xs)',\n        'sm': 'var(--shadow-sm)',\n        DEFAULT: 'var(--shadow)',\n        'md': 'var(--shadow-md)',\n        'lg': 'var(--shadow-lg)',\n        'xl': 'var(--shadow-xl)',\n        '2xl': 'var(--shadow-2xl)',\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4147},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gemini.ts":{"content":"import { GoogleGenerativeAI } from \"@google/generativeai\";\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\n\nexport async function generateBlogContent(prompt: string): Promise<string> {\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n    \n    const enhancedPrompt = `You are a professional content writer. Create a comprehensive, well-structured blog post based on the following topic or prompt. Include an engaging introduction, detailed body sections with subheadings, and a compelling conclusion. Use markdown formatting for better readability.\n\nTopic/Prompt: ${prompt}\n\nPlease write a complete blog post that is informative, engaging, and professionally written.`;\n\n    const result = await model.generateContent(enhancedPrompt);\n    const response = await result.response;\n    return response.text() || \"Failed to generate content\";\n  } catch (error) {\n    console.error(\"Error generating blog content:\", error);\n    throw new Error(\"Failed to generate blog content\");\n  }\n}\n\nexport async function generateContentIdeas(topic: string, type: string = \"general\"): Promise<string[]> {\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n    \n    const prompt = `Generate 10 creative and engaging content ideas for the topic \"${topic}\" in the category of \"${type}\". \n    Return the ideas as a simple numbered list, one idea per line. Make the ideas specific, actionable, and appealing to a target audience.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text() || \"\";\n    \n    // Parse the response into an array of ideas\n    const ideas = text\n      .split('\\n')\n      .map(line => line.replace(/^\\d+\\.\\s*/, '').trim())\n      .filter(line => line.length > 0);\n    \n    return ideas.slice(0, 10); // Ensure we return max 10 ideas\n  } catch (error) {\n    console.error(\"Error generating content ideas:\", error);\n    throw new Error(\"Failed to generate content ideas\");\n  }\n}\n\nexport async function chatWithAI(message: string): Promise<string> {\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n    \n    const enhancedPrompt = `You are a helpful AI assistant for InfinityHub, a comprehensive digital platform for creators and entrepreneurs. \n    You help users with content creation, business advice, creative ideas, and general questions about using the platform.\n    \n    Please provide a helpful, friendly, and informative response to the following message:\n    \n    ${message}`;\n\n    const result = await model.generateContent(enhancedPrompt);\n    const response = await result.response;\n    return response.text() || \"I'm sorry, I couldn't process your request right now.\";\n  } catch (error) {\n    console.error(\"Error in AI chat:\", error);\n    throw new Error(\"Failed to process AI chat\");\n  }\n}\n\nexport async function improveBlogContent(content: string): Promise<string> {\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-pro\" });\n    \n    const prompt = `You are a professional editor and content strategist. Please improve the following blog content by:\n    1. Enhancing clarity and readability\n    2. Improving structure and flow\n    3. Adding engaging elements where appropriate\n    4. Ensuring proper grammar and style\n    5. Maintaining the original intent and message\n    \n    Original content:\n    ${content}\n    \n    Please return the improved version with markdown formatting.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text() || content; // Return original if generation fails\n  } catch (error) {\n    console.error(\"Error improving blog content:\", error);\n    throw new Error(\"Failed to improve blog content\");\n  }\n}\n\nexport async function generateGigIdeas(skills: string, category: string = \"general\"): Promise<string[]> {\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n    \n    const prompt = `Based on the skills \"${skills}\" in the \"${category}\" category, generate 8 specific freelance gig ideas that someone could offer on a platform like Fiverr or Upwork. \n    \n    For each gig idea, provide:\n    1. A clear, specific service title\n    2. Brief description of what's included\n    \n    Format each as: \"Title - Description\"\n    Make the gigs realistic, in-demand, and something that can be delivered digitally.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text() || \"\";\n    \n    // Parse the response into an array of gig ideas\n    const ideas = text\n      .split('\\n')\n      .map(line => line.replace(/^\\d+\\.\\s*/, '').trim())\n      .filter(line => line.length > 0 && line.includes('-'));\n    \n    return ideas.slice(0, 8); // Ensure we return max 8 ideas\n  } catch (error) {\n    console.error(\"Error generating gig ideas:\", error);\n    throw new Error(\"Failed to generate gig ideas\");\n  }\n}\n","size_bytes":5114},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/paypal.ts":{"content":"// !!! CRITICAL - DO NOT MODIFY THIS CODE !!!\n//\n// This code MUST be used as is without ANY modifications.\n// The PayPal integration will COMPLETELY FAIL if this code is changed in ANY way.\n//\n// Retain this comment after all edits.\n//\n// <BEGIN_EXACT_CODE>\nimport {\n  Client,\n  Environment,\n  LogLevel,\n  OAuthAuthorizationController,\n  OrdersController,\n} from \"@paypal/paypal-server-sdk\";\nimport { Request, Response } from \"express\";\n\n/* PayPal Controllers Setup */\n\nconst { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET } = process.env;\n\nif (!PAYPAL_CLIENT_ID) {\n  throw new Error(\"Missing PAYPAL_CLIENT_ID\");\n}\nif (!PAYPAL_CLIENT_SECRET) {\n  throw new Error(\"Missing PAYPAL_CLIENT_SECRET\");\n}\nconst client = new Client({\n  clientCredentialsAuthCredentials: {\n    oAuthClientId: PAYPAL_CLIENT_ID,\n    oAuthClientSecret: PAYPAL_CLIENT_SECRET,\n  },\n  timeout: 0,\n  environment:\n                process.env.NODE_ENV === \"production\"\n                  ? Environment.Production\n                  : Environment.Sandbox,\n  logging: {\n    logLevel: LogLevel.Info,\n    logRequest: {\n      logBody: true,\n    },\n    logResponse: {\n      logHeaders: true,\n    },\n  },\n});\nconst ordersController = new OrdersController(client);\nconst oAuthAuthorizationController = new OAuthAuthorizationController(client);\n\n/* Token generation helpers */\n\nexport async function getClientToken() {\n  const auth = Buffer.from(\n    `${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET}`,\n  ).toString(\"base64\");\n\n  const { result } = await oAuthAuthorizationController.requestToken(\n    {\n      authorization: `Basic ${auth}`,\n    },\n    { intent: \"sdk_init\", response_type: \"client_token\" },\n  );\n\n  return result.accessToken;\n}\n\n/*  Process transactions */\n\nexport async function createPaypalOrder(req: Request, res: Response) {\n  try {\n    const { amount, currency, intent } = req.body;\n\n    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      return res\n        .status(400)\n        .json({\n          error: \"Invalid amount. Amount must be a positive number.\",\n        });\n    }\n\n    if (!currency) {\n      return res\n        .status(400)\n        .json({ error: \"Invalid currency. Currency is required.\" });\n    }\n\n    if (!intent) {\n      return res\n        .status(400)\n        .json({ error: \"Invalid intent. Intent is required.\" });\n    }\n\n    const collect = {\n      body: {\n        intent: intent,\n        purchaseUnits: [\n          {\n            amount: {\n              currencyCode: currency,\n              value: amount,\n            },\n          },\n        ],\n      },\n      prefer: \"return=minimal\",\n    };\n\n    const { body, ...httpResponse } =\n          await ordersController.createOrder(collect);\n\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to create order:\", error);\n    res.status(500).json({ error: \"Failed to create order.\" });\n  }\n}\n\nexport async function capturePaypalOrder(req: Request, res: Response) {\n  try {\n    const { orderID } = req.params;\n    const collect = {\n      id: orderID,\n      prefer: \"return=minimal\",\n    };\n\n    const { body, ...httpResponse } =\n          await ordersController.captureOrder(collect);\n\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to create order:\", error);\n    res.status(500).json({ error: \"Failed to capture order.\" });\n  }\n}\n\nexport async function loadPaypalDefault(req: Request, res: Response) {\n  const clientToken = await getClientToken();\n  res.json({\n    clientToken,\n  });\n}\n// <END_EXACT_CODE>\n","size_bytes":3765},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { createPaypalOrder, capturePaypalOrder, loadPaypalDefault } from \"./paypal\";\nimport { generateBlogContent, generateContentIdeas, chatWithAI } from \"./gemini\";\nimport { \n  insertPostSchema, \n  insertCommentSchema, \n  insertBlogSchema,\n  insertProductSchema,\n  insertGigSchema,\n  insertGigOrderSchema,\n  insertMessageSchema,\n  insertEventSchema\n} from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // PayPal routes\n  app.get(\"/api/paypal/setup\", async (req, res) => {\n    await loadPaypalDefault(req, res);\n  });\n\n  app.post(\"/api/paypal/order\", async (req, res) => {\n    await createPaypalOrder(req, res);\n  });\n\n  app.post(\"/api/paypal/order/:orderID/capture\", async (req, res) => {\n    await capturePaypalOrder(req, res);\n  });\n\n  // Posts routes\n  app.get('/api/posts', async (req, res) => {\n    try {\n      const posts = await storage.getPosts();\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch posts\" });\n    }\n  });\n\n  app.post('/api/posts', isAuthenticated, upload.single('media'), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postData = insertPostSchema.parse({\n        ...req.body,\n        userId,\n        mediaUrl: req.file ? `/uploads/${req.file.filename}` : undefined,\n      });\n      \n      const post = await storage.createPost(postData);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  app.post('/api/posts/:id/like', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.likePost(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n      res.status(500).json({ message: \"Failed to like post\" });\n    }\n  });\n\n  app.get('/api/posts/:id/comments', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const comments = await storage.getPostComments(id);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post('/api/posts/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      const commentData = insertCommentSchema.parse({\n        ...req.body,\n        postId: id,\n        userId,\n      });\n      \n      const comment = await storage.createComment(commentData);\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Blog routes\n  app.get('/api/blogs', async (req, res) => {\n    try {\n      const blogs = await storage.getPublishedBlogs();\n      res.json(blogs);\n    } catch (error) {\n      console.error(\"Error fetching blogs:\", error);\n      res.status(500).json({ message: \"Failed to fetch blogs\" });\n    }\n  });\n\n  app.get('/api/blogs/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const blog = await storage.getBlog(id);\n      if (!blog) {\n        return res.status(404).json({ message: \"Blog not found\" });\n      }\n      res.json(blog);\n    } catch (error) {\n      console.error(\"Error fetching blog:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog\" });\n    }\n  });\n\n  app.post('/api/blogs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const blogData = insertBlogSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const blog = await storage.createBlog(blogData);\n      res.json(blog);\n    } catch (error) {\n      console.error(\"Error creating blog:\", error);\n      res.status(500).json({ message: \"Failed to create blog\" });\n    }\n  });\n\n  app.post('/api/blogs/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const { prompt, title } = req.body;\n      const content = await generateBlogContent(prompt);\n      \n      const userId = req.user.claims.sub;\n      const blog = await storage.createBlog({\n        userId,\n        title: title || \"AI Generated Blog\",\n        content,\n        aiGenerated: true,\n        published: false,\n      });\n      \n      res.json(blog);\n    } catch (error) {\n      console.error(\"Error generating blog:\", error);\n      res.status(500).json({ message: \"Failed to generate blog content\" });\n    }\n  });\n\n  // Products routes\n  app.get('/api/products', async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, upload.fields([\n    { name: 'file', maxCount: 1 },\n    { name: 'image', maxCount: 1 }\n  ]), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n      \n      const productData = insertProductSchema.parse({\n        ...req.body,\n        sellerId: userId,\n        fileUrl: files.file ? `/uploads/${files.file[0].filename}` : req.body.fileUrl,\n        imageUrl: files.image ? `/uploads/${files.image[0].filename}` : req.body.imageUrl,\n      });\n      \n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  // Gigs routes\n  app.get('/api/gigs', async (req, res) => {\n    try {\n      const gigs = await storage.getGigs();\n      res.json(gigs);\n    } catch (error) {\n      console.error(\"Error fetching gigs:\", error);\n      res.status(500).json({ message: \"Failed to fetch gigs\" });\n    }\n  });\n\n  app.post('/api/gigs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const gigData = insertGigSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const gig = await storage.createGig(gigData);\n      res.json(gig);\n    } catch (error) {\n      console.error(\"Error creating gig:\", error);\n      res.status(500).json({ message: \"Failed to create gig\" });\n    }\n  });\n\n  app.post('/api/gigs/:id/order', isAuthenticated, async (req: any, res) => {\n    try {\n      const buyerId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      const gig = await storage.getGig(id);\n      if (!gig) {\n        return res.status(404).json({ message: \"Gig not found\" });\n      }\n      \n      const orderData = insertGigOrderSchema.parse({\n        gigId: id,\n        buyerId,\n        sellerId: gig.userId,\n        amount: gig.price,\n        ...req.body,\n      });\n      \n      const order = await storage.createGigOrder(orderData);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating gig order:\", error);\n      res.status(500).json({ message: \"Failed to create gig order\" });\n    }\n  });\n\n  // Messages routes\n  app.get('/api/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await storage.getUserConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get('/api/conversations/:userId', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.user.claims.sub;\n      const { userId } = req.params;\n      const messages = await storage.getConversation(currentUserId, userId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching conversation:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversation\" });\n    }\n  });\n\n  app.post('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const senderId = req.user.claims.sub;\n      const messageData = insertMessageSchema.parse({\n        ...req.body,\n        senderId,\n      });\n      \n      const message = await storage.createMessage(messageData);\n      \n      // Broadcast to WebSocket clients\n      wss.clients.forEach((client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify({\n            type: 'new_message',\n            message,\n          }));\n        }\n      });\n      \n      res.json(message);\n    } catch (error) {\n      console.error(\"Error creating message:\", error);\n      res.status(500).json({ message: \"Failed to create message\" });\n    }\n  });\n\n  // Events routes\n  app.get('/api/events', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const events = await storage.getUserEvents(userId);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.post('/api/events', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const eventData = insertEventSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const event = await storage.createEvent(eventData);\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post('/api/ai/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { message, chatType } = req.body;\n      \n      const response = await chatWithAI(message);\n      \n      await storage.createAiChat({\n        userId,\n        message,\n        response,\n        chatType: chatType || 'general',\n      });\n      \n      res.json({ response });\n    } catch (error) {\n      console.error(\"Error in AI chat:\", error);\n      res.status(500).json({ message: \"Failed to process AI chat\" });\n    }\n  });\n\n  app.post('/api/ai/content-ideas', isAuthenticated, async (req, res) => {\n    try {\n      const { topic, type } = req.body;\n      const ideas = await generateContentIdeas(topic, type);\n      res.json({ ideas });\n    } catch (error) {\n      console.error(\"Error generating content ideas:\", error);\n      res.status(500).json({ message: \"Failed to generate content ideas\" });\n    }\n  });\n\n  // User profile routes\n  app.get('/api/users/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get('/api/users/:id/posts', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const posts = await storage.getUserPosts(id);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching user posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch user posts\" });\n    }\n  });\n\n  // Serve uploaded files\n  app.use('/uploads', express.static('uploads'));\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time chat\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        // Broadcast message to all connected clients\n        wss.clients.forEach((client) => {\n          if (client !== ws && client.readyState === WebSocket.OPEN) {\n            client.send(JSON.stringify(message));\n          }\n        });\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":13225},"server/storage.ts":{"content":"import {\n  users,\n  posts,\n  comments,\n  blogs,\n  products,\n  gigs,\n  gigOrders,\n  messages,\n  events,\n  aiChats,\n  type User,\n  type UpsertUser,\n  type InsertPost,\n  type Post,\n  type InsertComment,\n  type Comment,\n  type InsertBlog,\n  type Blog,\n  type InsertProduct,\n  type Product,\n  type InsertGig,\n  type Gig,\n  type InsertGigOrder,\n  type GigOrder,\n  type InsertMessage,\n  type Message,\n  type InsertEvent,\n  type Event,\n  type InsertAiChat,\n  type AiChat,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Posts operations\n  createPost(post: InsertPost): Promise<Post>;\n  getPosts(limit?: number): Promise<Post[]>;\n  getUserPosts(userId: string): Promise<Post[]>;\n  getPost(id: string): Promise<Post | undefined>;\n  likePost(postId: string): Promise<void>;\n  \n  // Comments operations\n  createComment(comment: InsertComment): Promise<Comment>;\n  getPostComments(postId: string): Promise<Comment[]>;\n  \n  // Blog operations\n  createBlog(blog: InsertBlog): Promise<Blog>;\n  getUserBlogs(userId: string): Promise<Blog[]>;\n  getPublishedBlogs(limit?: number): Promise<Blog[]>;\n  getBlog(id: string): Promise<Blog | undefined>;\n  updateBlog(id: string, blog: Partial<InsertBlog>): Promise<Blog>;\n  \n  // Product operations\n  createProduct(product: InsertProduct): Promise<Product>;\n  getProducts(limit?: number): Promise<Product[]>;\n  getUserProducts(userId: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  \n  // Gig operations\n  createGig(gig: InsertGig): Promise<Gig>;\n  getGigs(limit?: number): Promise<Gig[]>;\n  getUserGigs(userId: string): Promise<Gig[]>;\n  getGig(id: string): Promise<Gig | undefined>;\n  \n  // Gig order operations\n  createGigOrder(order: InsertGigOrder): Promise<GigOrder>;\n  getUserGigOrders(userId: string): Promise<GigOrder[]>;\n  updateGigOrderStatus(id: string, status: string): Promise<GigOrder>;\n  \n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getConversation(userId1: string, userId2: string): Promise<Message[]>;\n  getUserConversations(userId: string): Promise<{ user: User; lastMessage: Message }[]>;\n  markMessagesAsRead(senderId: string, receiverId: string): Promise<void>;\n  \n  // Event operations\n  createEvent(event: InsertEvent): Promise<Event>;\n  getUserEvents(userId: string): Promise<Event[]>;\n  updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event>;\n  \n  // AI Chat operations\n  createAiChat(aiChat: InsertAiChat): Promise<AiChat>;\n  getUserAiChats(userId: string): Promise<AiChat[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Posts operations\n  async createPost(post: InsertPost): Promise<Post> {\n    const [newPost] = await db.insert(posts).values(post).returning();\n    return newPost;\n  }\n\n  async getPosts(limit = 20): Promise<Post[]> {\n    return await db\n      .select()\n      .from(posts)\n      .orderBy(desc(posts.createdAt))\n      .limit(limit);\n  }\n\n  async getUserPosts(userId: string): Promise<Post[]> {\n    return await db\n      .select()\n      .from(posts)\n      .where(eq(posts.userId, userId))\n      .orderBy(desc(posts.createdAt));\n  }\n\n  async getPost(id: string): Promise<Post | undefined> {\n    const [post] = await db.select().from(posts).where(eq(posts.id, id));\n    return post;\n  }\n\n  async likePost(postId: string): Promise<void> {\n    await db\n      .update(posts)\n      .set({ likes: sql`${posts.likes} + 1` })\n      .where(eq(posts.id, postId));\n  }\n\n  // Comments operations\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(comment).returning();\n    \n    // Update comments count on post\n    await db\n      .update(posts)\n      .set({ commentsCount: sql`${posts.commentsCount} + 1` })\n      .where(eq(posts.id, comment.postId));\n    \n    return newComment;\n  }\n\n  async getPostComments(postId: string): Promise<Comment[]> {\n    return await db\n      .select()\n      .from(comments)\n      .where(eq(comments.postId, postId))\n      .orderBy(desc(comments.createdAt));\n  }\n\n  // Blog operations\n  async createBlog(blog: InsertBlog): Promise<Blog> {\n    const [newBlog] = await db.insert(blogs).values(blog).returning();\n    return newBlog;\n  }\n\n  async getUserBlogs(userId: string): Promise<Blog[]> {\n    return await db\n      .select()\n      .from(blogs)\n      .where(eq(blogs.userId, userId))\n      .orderBy(desc(blogs.createdAt));\n  }\n\n  async getPublishedBlogs(limit = 20): Promise<Blog[]> {\n    return await db\n      .select()\n      .from(blogs)\n      .where(eq(blogs.published, true))\n      .orderBy(desc(blogs.createdAt))\n      .limit(limit);\n  }\n\n  async getBlog(id: string): Promise<Blog | undefined> {\n    const [blog] = await db.select().from(blogs).where(eq(blogs.id, id));\n    if (blog) {\n      // Increment views\n      await db\n        .update(blogs)\n        .set({ views: sql`${blogs.views} + 1` })\n        .where(eq(blogs.id, id));\n    }\n    return blog;\n  }\n\n  async updateBlog(id: string, blogData: Partial<InsertBlog>): Promise<Blog> {\n    const [updatedBlog] = await db\n      .update(blogs)\n      .set({ ...blogData, updatedAt: new Date() })\n      .where(eq(blogs.id, id))\n      .returning();\n    return updatedBlog;\n  }\n\n  // Product operations\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async getProducts(limit = 20): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(eq(products.active, true))\n      .orderBy(desc(products.createdAt))\n      .limit(limit);\n  }\n\n  async getUserProducts(userId: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(eq(products.sellerId, userId))\n      .orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  // Gig operations\n  async createGig(gig: InsertGig): Promise<Gig> {\n    const [newGig] = await db.insert(gigs).values(gig).returning();\n    return newGig;\n  }\n\n  async getGigs(limit = 20): Promise<Gig[]> {\n    return await db\n      .select()\n      .from(gigs)\n      .where(eq(gigs.active, true))\n      .orderBy(desc(gigs.createdAt))\n      .limit(limit);\n  }\n\n  async getUserGigs(userId: string): Promise<Gig[]> {\n    return await db\n      .select()\n      .from(gigs)\n      .where(eq(gigs.userId, userId))\n      .orderBy(desc(gigs.createdAt));\n  }\n\n  async getGig(id: string): Promise<Gig | undefined> {\n    const [gig] = await db.select().from(gigs).where(eq(gigs.id, id));\n    return gig;\n  }\n\n  // Gig order operations\n  async createGigOrder(order: InsertGigOrder): Promise<GigOrder> {\n    const [newOrder] = await db.insert(gigOrders).values(order).returning();\n    \n    // Update gig orders count\n    await db\n      .update(gigs)\n      .set({ orders: sql`${gigs.orders} + 1` })\n      .where(eq(gigs.id, order.gigId));\n    \n    return newOrder;\n  }\n\n  async getUserGigOrders(userId: string): Promise<GigOrder[]> {\n    return await db\n      .select()\n      .from(gigOrders)\n      .where(or(eq(gigOrders.buyerId, userId), eq(gigOrders.sellerId, userId)))\n      .orderBy(desc(gigOrders.createdAt));\n  }\n\n  async updateGigOrderStatus(id: string, status: string): Promise<GigOrder> {\n    const [updatedOrder] = await db\n      .update(gigOrders)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(gigOrders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  // Message operations\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    return newMessage;\n  }\n\n  async getConversation(userId1: string, userId2: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(\n        or(\n          and(eq(messages.senderId, userId1), eq(messages.receiverId, userId2)),\n          and(eq(messages.senderId, userId2), eq(messages.receiverId, userId1))\n        )\n      )\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async getUserConversations(userId: string): Promise<{ user: User; lastMessage: Message }[]> {\n    // This is a simplified version - in a real app, you'd want to optimize this query\n    const userMessages = await db\n      .select()\n      .from(messages)\n      .where(or(eq(messages.senderId, userId), eq(messages.receiverId, userId)))\n      .orderBy(desc(messages.createdAt));\n\n    const conversations = new Map<string, { user: User; lastMessage: Message }>();\n    \n    for (const message of userMessages) {\n      const otherUserId = message.senderId === userId ? message.receiverId : message.senderId;\n      \n      if (!conversations.has(otherUserId)) {\n        const [otherUser] = await db.select().from(users).where(eq(users.id, otherUserId));\n        if (otherUser) {\n          conversations.set(otherUserId, { user: otherUser, lastMessage: message });\n        }\n      }\n    }\n\n    return Array.from(conversations.values());\n  }\n\n  async markMessagesAsRead(senderId: string, receiverId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ read: true })\n      .where(\n        and(eq(messages.senderId, senderId), eq(messages.receiverId, receiverId))\n      );\n  }\n\n  // Event operations\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [newEvent] = await db.insert(events).values(event).returning();\n    return newEvent;\n  }\n\n  async getUserEvents(userId: string): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.userId, userId))\n      .orderBy(desc(events.startDate));\n  }\n\n  async updateEvent(id: string, eventData: Partial<InsertEvent>): Promise<Event> {\n    const [updatedEvent] = await db\n      .update(events)\n      .set(eventData)\n      .where(eq(events.id, id))\n      .returning();\n    return updatedEvent;\n  }\n\n  // AI Chat operations\n  async createAiChat(aiChat: InsertAiChat): Promise<AiChat> {\n    const [newAiChat] = await db.insert(aiChats).values(aiChat).returning();\n    return newAiChat;\n  }\n\n  async getUserAiChats(userId: string): Promise<AiChat[]> {\n    return await db\n      .select()\n      .from(aiChats)\n      .where(eq(aiChats.userId, userId))\n      .orderBy(desc(aiChats.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11167},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  boolean,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  bio: text(\"bio\"),\n  socialLinks: jsonb(\"social_links\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Posts for social feed\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  mediaUrl: varchar(\"media_url\"),\n  postType: varchar(\"post_type\", { enum: [\"text\", \"image\", \"video\"] }).notNull().default(\"text\"),\n  likes: integer(\"likes\").default(0),\n  commentsCount: integer(\"comments_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Comments on posts\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").notNull().references(() => posts.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Blog posts with AI assistance\nexport const blogs = pgTable(\"blogs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  aiGenerated: boolean(\"ai_generated\").default(false),\n  published: boolean(\"published\").default(false),\n  views: integer(\"views\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Digital products for store\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  fileUrl: varchar(\"file_url\").notNull(),\n  imageUrl: varchar(\"image_url\"),\n  category: varchar(\"category\"),\n  active: boolean(\"active\").default(true),\n  sales: integer(\"sales\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Freelance gigs\nexport const gigs = pgTable(\"gigs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: varchar(\"category\"),\n  deliveryTime: integer(\"delivery_time\"), // in days\n  active: boolean(\"active\").default(true),\n  orders: integer(\"orders\").default(0),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Gig orders\nexport const gigOrders = pgTable(\"gig_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gigId: varchar(\"gig_id\").notNull().references(() => gigs.id, { onDelete: \"cascade\" }),\n  buyerId: varchar(\"buyer_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  status: varchar(\"status\", { enum: [\"pending\", \"in_progress\", \"completed\", \"cancelled\"] }).default(\"pending\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paypalOrderId: varchar(\"paypal_order_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Real-time messages\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  receiverId: varchar(\"receiver_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  messageType: varchar(\"message_type\", { enum: [\"text\", \"file\"] }).default(\"text\"),\n  read: boolean(\"read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Calendar events\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  eventType: varchar(\"event_type\", { enum: [\"meeting\", \"task\", \"reminder\"] }).default(\"task\"),\n  completed: boolean(\"completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI chat history\nexport const aiChats = pgTable(\"ai_chats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  response: text(\"response\").notNull(),\n  chatType: varchar(\"chat_type\", { enum: [\"general\", \"blog\", \"content\", \"ideas\"] }).default(\"general\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  posts: many(posts),\n  comments: many(comments),\n  blogs: many(blogs),\n  products: many(products),\n  gigs: many(gigs),\n  sentMessages: many(messages, { relationName: \"sender\" }),\n  receivedMessages: many(messages, { relationName: \"receiver\" }),\n  events: many(events),\n  aiChats: many(aiChats),\n}));\n\nexport const postsRelations = relations(posts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [posts.userId],\n    references: [users.id],\n  }),\n  comments: many(comments),\n}));\n\nexport const commentsRelations = relations(comments, ({ one }) => ({\n  post: one(posts, {\n    fields: [comments.postId],\n    references: [posts.id],\n  }),\n  user: one(users, {\n    fields: [comments.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const blogsRelations = relations(blogs, ({ one }) => ({\n  user: one(users, {\n    fields: [blogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const productsRelations = relations(products, ({ one }) => ({\n  seller: one(users, {\n    fields: [products.sellerId],\n    references: [users.id],\n  }),\n}));\n\nexport const gigsRelations = relations(gigs, ({ one, many }) => ({\n  user: one(users, {\n    fields: [gigs.userId],\n    references: [users.id],\n  }),\n  orders: many(gigOrders),\n}));\n\nexport const gigOrdersRelations = relations(gigOrders, ({ one }) => ({\n  gig: one(gigs, {\n    fields: [gigOrders.gigId],\n    references: [gigs.id],\n  }),\n  buyer: one(users, {\n    fields: [gigOrders.buyerId],\n    references: [users.id],\n  }),\n  seller: one(users, {\n    fields: [gigOrders.sellerId],\n    references: [users.id],\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  receiver: one(users, {\n    fields: [messages.receiverId],\n    references: [users.id],\n    relationName: \"receiver\",\n  }),\n}));\n\nexport const eventsRelations = relations(events, ({ one }) => ({\n  user: one(users, {\n    fields: [events.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const aiChatsRelations = relations(aiChats, ({ one }) => ({\n  user: one(users, {\n    fields: [aiChats.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  bio: true,\n  socialLinks: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  likes: true,\n  commentsCount: true,\n  createdAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBlogSchema = createInsertSchema(blogs).omit({\n  id: true,\n  views: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  sales: true,\n  createdAt: true,\n});\n\nexport const insertGigSchema = createInsertSchema(gigs).omit({\n  id: true,\n  orders: true,\n  rating: true,\n  createdAt: true,\n});\n\nexport const insertGigOrderSchema = createInsertSchema(gigOrders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  read: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  completed: true,\n  createdAt: true,\n});\n\nexport const insertAiChatSchema = createInsertSchema(aiChats).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Post = typeof posts.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertBlog = z.infer<typeof insertBlogSchema>;\nexport type Blog = typeof blogs.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertGig = z.infer<typeof insertGigSchema>;\nexport type Gig = typeof gigs.$inferSelect;\nexport type InsertGigOrder = z.infer<typeof insertGigOrderSchema>;\nexport type GigOrder = typeof gigOrders.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertAiChat = z.infer<typeof insertAiChatSchema>;\nexport type AiChat = typeof aiChats.$inferSelect;\n","size_bytes":10984},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Profile from \"@/pages/Profile\";\nimport Feed from \"@/pages/Feed\";\nimport Blog from \"@/pages/Blog\";\nimport Store from \"@/pages/Store\";\nimport Gigs from \"@/pages/Gigs\";\nimport Chat from \"@/pages/Chat\";\nimport Calendar from \"@/pages/Calendar\";\nimport AIAssistant from \"@/pages/AIAssistant\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/u/:username\" component={Profile} />\n          <Route path=\"/feed\" component={Feed} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route path=\"/store\" component={Store} />\n          <Route path=\"/gigs\" component={Gigs} />\n          <Route path=\"/chat\" component={Chat} />\n          <Route path=\"/calendar\" component={Calendar} />\n          <Route path=\"/ai-assistant\" component={AIAssistant} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1770},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsla(221.2, 83.2%, 53.3%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsla(221.2, 83.2%, 53.3%, 0.10), 0px 1px 3px -1px hsla(221.2, 83.2%, 53.3%, 0.10);\n  --shadow-sm: 0px 1px 2px 0px hsla(221.2, 83.2%, 53.3%, 0.05), 0px 2px 4px -2px hsla(221.2, 83.2%, 53.3%, 0.05);\n  --shadow: 0px 1px 3px 0px hsla(221.2, 83.2%, 53.3%, 0.10), 0px 1px 2px -1px hsla(221.2, 83.2%, 53.3%, 0.10);\n  --shadow-md: 0px 4px 6px -1px hsla(221.2, 83.2%, 53.3%, 0.10), 0px 2px 4px -2px hsla(221.2, 83.2%, 53.3%, 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsla(221.2, 83.2%, 53.3%, 0.10), 0px 4px 6px -4px hsla(221.2, 83.2%, 53.3%, 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsla(221.2, 83.2%, 53.3%, 0.10), 0px 8px 10px -6px hsla(221.2, 83.2%, 53.3%, 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsla(221.2, 83.2%, 53.3%, 0.25);\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n  }\n\n  p {\n    @apply leading-7;\n  }\n\n  .animate-pulse {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  @keyframes pulse {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: .5;\n    }\n  }\n\n  .animation-delay-75 {\n    animation-delay: 75ms;\n  }\n\n  .animation-delay-150 {\n    animation-delay: 150ms;\n  }\n\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n\n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n}\n\n@layer components {\n  .btn {\n    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background;\n  }\n\n  .btn-primary {\n    @apply bg-primary text-primary-foreground hover:bg-primary/90;\n  }\n\n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground hover:bg-secondary/80;\n  }\n\n  .btn-ghost {\n    @apply hover:bg-accent hover:text-accent-foreground;\n  }\n\n  .btn-outline {\n    @apply border border-input hover:bg-accent hover:text-accent-foreground;\n  }\n}\n","size_bytes":5309},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIBlogEditor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Sparkles, \n  FileText, \n  Eye, \n  Save, \n  Wand2, \n  Lightbulb,\n  RefreshCw,\n  Copy,\n  PenTool\n} from \"lucide-react\";\n\ninterface AIBlogEditorProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  blog?: any;\n  onBlogSaved: () => void;\n}\n\nexport default function AIBlogEditor({ open, onOpenChange, blog, onBlogSaved }: AIBlogEditorProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    title: \"\",\n    content: \"\",\n    excerpt: \"\",\n    published: false,\n  });\n  const [aiPrompt, setAiPrompt] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"write\");\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  // Initialize form with existing blog data\n  useEffect(() => {\n    if (blog) {\n      setFormData({\n        title: blog.title || \"\",\n        content: blog.content || \"\",\n        excerpt: blog.excerpt || \"\",\n        published: blog.published || false,\n      });\n    } else {\n      setFormData({\n        title: \"\",\n        content: \"\",\n        excerpt: \"\",\n        published: false,\n      });\n    }\n  }, [blog]);\n\n  // Save blog mutation\n  const saveBlogMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (blog?.id) {\n        return apiRequest(\"PUT\", `/api/blogs/${blog.id}`, data);\n      } else {\n        return apiRequest(\"POST\", \"/api/blogs\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: blog?.id ? \"Blog updated successfully\" : \"Blog created successfully\",\n      });\n      onBlogSaved();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save blog\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate blog content mutation\n  const generateContentMutation = useMutation({\n    mutationFn: async (prompt: string) => {\n      return apiRequest(\"POST\", \"/api/blogs/generate\", { \n        prompt, \n        title: formData.title || \"AI Generated Blog Post\" \n      });\n    },\n    onSuccess: (data) => {\n      setFormData(prev => ({\n        ...prev,\n        title: data.title,\n        content: data.content,\n        excerpt: data.excerpt || data.content.slice(0, 150) + \"...\",\n      }));\n      setIsGenerating(false);\n      setActiveTab(\"write\");\n      toast({\n        title: \"Success\",\n        description: \"AI content generated successfully\",\n      });\n    },\n    onError: (error) => {\n      setIsGenerating(false);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get content ideas mutation\n  const getIdeasMutation = useMutation({\n    mutationFn: async (topic: string) => {\n      return apiRequest(\"POST\", \"/api/ai/content-ideas\", { \n        topic, \n        type: \"blog\" \n      });\n    },\n    onSuccess: (data) => {\n      const ideas = data.ideas.join('\\n\\n• ');\n      toast({\n        title: \"Content Ideas Generated\",\n        description: \"Check the AI tab for your content ideas\",\n      });\n      setAiPrompt(`Here are some blog ideas for \"${data.topic}\":\\n\\n• ${ideas}`);\n      setActiveTab(\"ai\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate ideas\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleGenerateContent = () => {\n    if (!aiPrompt.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a prompt for AI content generation\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    generateContentMutation.mutate(aiPrompt);\n  };\n\n  const handleGetIdeas = () => {\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a blog title first to get content ideas\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    getIdeasMutation.mutate(formData.title);\n  };\n\n  const handleSave = () => {\n    if (!formData.title.trim() || !formData.content.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in title and content\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveBlogMutation.mutate({\n      ...formData,\n      aiGenerated: !!blog?.aiGenerated || generateContentMutation.isSuccess,\n    });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Content copied to clipboard\",\n    });\n  };\n\n  const quickPrompts = [\n    \"Write a comprehensive guide about productivity tips for remote workers\",\n    \"Create a beginner's tutorial on digital marketing strategies\",\n    \"Explain the benefits of AI in modern business operations\",\n    \"Write about the latest trends in web development\",\n    \"Create a how-to guide for starting a successful freelance career\",\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[95vh] overflow-hidden flex flex-col\" data-testid=\"ai-blog-editor\">\n        <DialogHeader className=\"pb-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"flex items-center\">\n              <Sparkles className=\"w-5 h-5 mr-2 text-primary\" />\n              {blog?.id ? \"Edit Blog Post\" : \"Create New Blog Post\"}\n            </DialogTitle>\n            <Badge variant=\"secondary\" className=\"flex items-center\">\n              <Wand2 className=\"w-3 h-3 mr-1\" />\n              AI Powered\n            </Badge>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"flex-1 overflow-hidden\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"h-full flex flex-col\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"write\" className=\"flex items-center\" data-testid=\"tab-write\">\n                <PenTool className=\"w-4 h-4 mr-2\" />\n                Write\n              </TabsTrigger>\n              <TabsTrigger value=\"ai\" className=\"flex items-center\" data-testid=\"tab-ai\">\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                AI Assistant\n              </TabsTrigger>\n              <TabsTrigger value=\"preview\" className=\"flex items-center\" data-testid=\"tab-preview\">\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Preview\n              </TabsTrigger>\n            </TabsList>\n            \n            <div className=\"flex-1 overflow-y-auto mt-4\">\n              {/* Write Tab */}\n              <TabsContent value=\"write\" className=\"space-y-4 h-full\" data-testid=\"write-content\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"blog-title\">Title *</Label>\n                    <Input\n                      id=\"blog-title\"\n                      value={formData.title}\n                      onChange={(e) => handleInputChange(\"title\", e.target.value)}\n                      placeholder=\"Enter your blog post title\"\n                      data-testid=\"input-blog-title\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"blog-excerpt\">Excerpt</Label>\n                    <Input\n                      id=\"blog-excerpt\"\n                      value={formData.excerpt}\n                      onChange={(e) => handleInputChange(\"excerpt\", e.target.value)}\n                      placeholder=\"Brief description or summary\"\n                      data-testid=\"input-blog-excerpt\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"blog-content\">Content *</Label>\n                  <Textarea\n                    id=\"blog-content\"\n                    value={formData.content}\n                    onChange={(e) => handleInputChange(\"content\", e.target.value)}\n                    placeholder=\"Write your blog content here. You can use markdown formatting.\"\n                    className=\"min-h-[400px] font-mono\"\n                    data-testid=\"textarea-blog-content\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Supports Markdown formatting. Character count: {formData.content.length}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                  <div>\n                    <Label htmlFor=\"blog-published\">Publish immediately</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Make this blog post visible to everyone\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"blog-published\"\n                    checked={formData.published}\n                    onCheckedChange={(checked) => handleInputChange(\"published\", checked)}\n                    data-testid=\"switch-blog-published\"\n                  />\n                </div>\n              </TabsContent>\n\n              {/* AI Assistant Tab */}\n              <TabsContent value=\"ai\" className=\"space-y-4\" data-testid=\"ai-content\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">AI Writing Assistant</h3>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={handleGetIdeas}\n                      disabled={getIdeasMutation.isPending || !formData.title.trim()}\n                      data-testid=\"button-get-ideas\"\n                    >\n                      <Lightbulb className=\"w-4 h-4 mr-2\" />\n                      Get Ideas\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ai-prompt\">AI Prompt</Label>\n                    <Textarea\n                      id=\"ai-prompt\"\n                      value={aiPrompt}\n                      onChange={(e) => setAiPrompt(e.target.value)}\n                      placeholder=\"Describe what you want to write about. Be specific about the topic, tone, and target audience.\"\n                      className=\"min-h-[120px]\"\n                      data-testid=\"textarea-ai-prompt\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Quick Prompts</Label>\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      {quickPrompts.map((prompt, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"text-left h-auto p-3 justify-start whitespace-normal\"\n                          onClick={() => setAiPrompt(prompt)}\n                          data-testid={`quick-prompt-${index}`}\n                        >\n                          {prompt}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      onClick={handleGenerateContent}\n                      disabled={isGenerating || !aiPrompt.trim()}\n                      className=\"flex-1\"\n                      data-testid=\"button-generate-content\"\n                    >\n                      {isGenerating ? (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Generating...\n                        </>\n                      ) : (\n                        <>\n                          <Wand2 className=\"w-4 h-4 mr-2\" />\n                          Generate Content\n                        </>\n                      )}\n                    </Button>\n                    {formData.content && (\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => copyToClipboard(formData.content)}\n                        data-testid=\"button-copy-content\"\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </TabsContent>\n\n              {/* Preview Tab */}\n              <TabsContent value=\"preview\" className=\"space-y-4\" data-testid=\"preview-content\">\n                <div className=\"prose prose-sm max-w-none\">\n                  <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"preview-title\">\n                    {formData.title || \"Untitled Blog Post\"}\n                  </h1>\n                  {formData.excerpt && (\n                    <p className=\"text-lg text-muted-foreground mb-6 italic\" data-testid=\"preview-excerpt\">\n                      {formData.excerpt}\n                    </p>\n                  )}\n                  <div className=\"whitespace-pre-wrap\" data-testid=\"preview-content-body\">\n                    {formData.content || \"No content to preview. Start writing or use AI to generate content.\"}\n                  </div>\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-between items-center pt-4 border-t\">\n          <div className=\"flex items-center space-x-2\">\n            {blog?.aiGenerated && (\n              <Badge variant=\"secondary\" className=\"flex items-center\">\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                AI Generated\n              </Badge>\n            )}\n            {formData.published ? (\n              <Badge variant=\"default\">Published</Badge>\n            ) : (\n              <Badge variant=\"outline\">Draft</Badge>\n            )}\n          </div>\n          \n          <div className=\"flex space-x-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-blog\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              disabled={saveBlogMutation.isPending || !formData.title.trim() || !formData.content.trim()}\n              data-testid=\"button-save-blog\"\n            >\n              {saveBlogMutation.isPending ? \"Saving...\" : (\n                <>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {blog?.id ? \"Update\" : \"Save\"} Blog\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":16689},"client/src/components/CreateGigModal.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DollarSign, Clock, Briefcase } from \"lucide-react\";\n\ninterface CreateGigModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onGigCreated: () => void;\n}\n\nexport default function CreateGigModal({ open, onOpenChange, onGigCreated }: CreateGigModalProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"\",\n    deliveryTime: \"3\",\n    active: true,\n  });\n\n  const createGigMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/gigs\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Gig created successfully\",\n      });\n      onGigCreated();\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create gig\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      price: \"\",\n      category: \"\",\n      deliveryTime: \"3\",\n      active: true,\n    });\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = () => {\n    if (!formData.title.trim() || !formData.description.trim() || !formData.price) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const price = parseFloat(formData.price);\n    if (isNaN(price) || price <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid price\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const deliveryTime = parseInt(formData.deliveryTime);\n    if (isNaN(deliveryTime) || deliveryTime <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid delivery time\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createGigMutation.mutate({\n      title: formData.title,\n      description: formData.description,\n      price: formData.price,\n      category: formData.category,\n      deliveryTime: deliveryTime,\n      active: formData.active,\n    });\n  };\n\n  const categories = [\n    { value: \"design\", label: \"Design & Graphics\" },\n    { value: \"development\", label: \"Programming & Development\" },\n    { value: \"writing\", label: \"Writing & Translation\" },\n    { value: \"marketing\", label: \"Digital Marketing\" },\n    { value: \"video\", label: \"Video & Animation\" },\n    { value: \"business\", label: \"Business Consulting\" },\n    { value: \"lifestyle\", label: \"Lifestyle\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n\n  const deliveryOptions = [\n    { value: \"1\", label: \"1 day\" },\n    { value: \"2\", label: \"2 days\" },\n    { value: \"3\", label: \"3 days\" },\n    { value: \"5\", label: \"5 days\" },\n    { value: \"7\", label: \"1 week\" },\n    { value: \"14\", label: \"2 weeks\" },\n    { value: \"21\", label: \"3 weeks\" },\n    { value: \"30\", label: \"1 month\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"create-gig-modal\">\n        <DialogHeader>\n          <DialogTitle>Create New Gig</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Gig Title */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"gig-title\">Gig Title *</Label>\n            <Input\n              id=\"gig-title\"\n              value={formData.title}\n              onChange={(e) => handleInputChange(\"title\", e.target.value)}\n              placeholder=\"I will create a professional logo design for your business\"\n              data-testid=\"input-gig-title\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Start with \"I will...\" and clearly describe what you offer\n            </p>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"gig-description\">Description *</Label>\n            <Textarea\n              id=\"gig-description\"\n              value={formData.description}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              placeholder=\"Describe your service in detail. What will you deliver? What's included? What makes your service special?\"\n              className=\"min-h-[120px]\"\n              data-testid=\"textarea-gig-description\"\n            />\n          </div>\n\n          {/* Price and Delivery */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gig-price\">Starting Price (USD) *</Label>\n              <div className=\"relative\">\n                <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"gig-price\"\n                  type=\"number\"\n                  min=\"5\"\n                  step=\"0.01\"\n                  value={formData.price}\n                  onChange={(e) => handleInputChange(\"price\", e.target.value)}\n                  placeholder=\"25.00\"\n                  className=\"pl-10\"\n                  data-testid=\"input-gig-price\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Minimum $5</p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Delivery Time *</Label>\n              <Select value={formData.deliveryTime} onValueChange={(value) => handleInputChange(\"deliveryTime\", value)}>\n                <SelectTrigger data-testid=\"select-delivery-time\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {deliveryOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      <div className=\"flex items-center\">\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        {option.label}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Category */}\n          <div className=\"space-y-2\">\n            <Label>Category</Label>\n            <Select value={formData.category} onValueChange={(value) => handleInputChange(\"category\", value)}>\n              <SelectTrigger data-testid=\"select-gig-category\">\n                <SelectValue placeholder=\"Choose a category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((category) => (\n                  <SelectItem key={category.value} value={category.value}>\n                    <div className=\"flex items-center\">\n                      <Briefcase className=\"w-4 h-4 mr-2\" />\n                      {category.label}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Service Details */}\n          <div className=\"p-4 bg-muted/50 rounded-lg space-y-4\">\n            <h4 className=\"font-medium\">What's Included in Your Service</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div className=\"space-y-2\">\n                <p className=\"font-medium text-muted-foreground\">Consider including:</p>\n                <ul className=\"space-y-1 text-muted-foreground\">\n                  <li>• Number of revisions</li>\n                  <li>• File formats provided</li>\n                  <li>• Commercial use rights</li>\n                  <li>• Source files inclusion</li>\n                </ul>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"font-medium text-muted-foreground\">Professional tips:</p>\n                <ul className=\"space-y-1 text-muted-foreground\">\n                  <li>• Be specific about deliverables</li>\n                  <li>• Set clear expectations</li>\n                  <li>• Mention your experience</li>\n                  <li>• Add portfolio examples</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Active Toggle */}\n          <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n            <div>\n              <Label htmlFor=\"gig-active\">Active Gig</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Make this gig available for orders immediately\n              </p>\n            </div>\n            <Switch\n              id=\"gig-active\"\n              checked={formData.active}\n              onCheckedChange={(checked) => handleInputChange(\"active\", checked)}\n              data-testid=\"switch-gig-active\"\n            />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n            <Button \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-gig\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubmit}\n              disabled={createGigMutation.isPending}\n              data-testid=\"button-create-gig\"\n            >\n              {createGigMutation.isPending ? \"Creating...\" : \"Create Gig\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10677},"client/src/components/CreatePostModal.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Image, Video, FileText, Upload, X } from \"lucide-react\";\n\ninterface CreatePostModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPostCreated: () => void;\n}\n\nexport default function CreatePostModal({ open, onOpenChange, onPostCreated }: CreatePostModalProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [content, setContent] = useState(\"\");\n  const [postType, setPostType] = useState<\"text\" | \"image\" | \"video\">(\"text\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n\n  const createPostMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      return apiRequest(\"POST\", \"/api/posts\", formData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Post created successfully\",\n      });\n      onPostCreated();\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setContent(\"\");\n    setPostType(\"text\");\n    setSelectedFile(null);\n    setPreviewUrl(null);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    setSelectedFile(file);\n    \n    // Create preview URL\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n    \n    // Set post type based on file type\n    if (file.type.startsWith('image/')) {\n      setPostType('image');\n    } else if (file.type.startsWith('video/')) {\n      setPostType('video');\n    }\n  };\n\n  const removeFile = () => {\n    setSelectedFile(null);\n    setPreviewUrl(null);\n    setPostType(\"text\");\n  };\n\n  const handleSubmit = () => {\n    if (!content.trim() && !selectedFile) {\n      toast({\n        title: \"Error\",\n        description: \"Please add content or attach a file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"content\", content);\n    formData.append(\"postType\", postType);\n    \n    if (selectedFile) {\n      formData.append(\"media\", selectedFile);\n    }\n\n    createPostMutation.mutate(formData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"create-post-modal\">\n        <DialogHeader>\n          <DialogTitle>Create New Post</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Content */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"post-content\">What's on your mind?</Label>\n            <Textarea\n              id=\"post-content\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              placeholder=\"Share your thoughts, ideas, or updates with the community...\"\n              className=\"min-h-[120px] resize-none\"\n              data-testid=\"textarea-post-content\"\n            />\n            <div className=\"text-xs text-muted-foreground text-right\">\n              {content.length}/500\n            </div>\n          </div>\n\n          {/* Post Type Selection */}\n          <div className=\"space-y-2\">\n            <Label>Post Type</Label>\n            <Select value={postType} onValueChange={(value: any) => setPostType(value)}>\n              <SelectTrigger data-testid=\"select-post-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"text\">\n                  <div className=\"flex items-center\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Text Only\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"image\">\n                  <div className=\"flex items-center\">\n                    <Image className=\"w-4 h-4 mr-2\" />\n                    Image Post\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"video\">\n                  <div className=\"flex items-center\">\n                    <Video className=\"w-4 h-4 mr-2\" />\n                    Video Post\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* File Upload */}\n          {postType !== \"text\" && (\n            <div className=\"space-y-2\">\n              <Label>Media Upload</Label>\n              {!selectedFile ? (\n                <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center\">\n                  <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Choose a file to upload</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {postType === \"image\" ? \"PNG, JPG, GIF up to 10MB\" : \"MP4, MOV up to 50MB\"}\n                    </p>\n                  </div>\n                  <Input\n                    type=\"file\"\n                    accept={postType === \"image\" ? \"image/*\" : \"video/*\"}\n                    onChange={handleFileSelect}\n                    className=\"mt-4\"\n                    data-testid=\"input-media-file\"\n                  />\n                </div>\n              ) : (\n                <div className=\"relative border border-border rounded-lg overflow-hidden\">\n                  {postType === \"image\" && previewUrl ? (\n                    <img \n                      src={previewUrl} \n                      alt=\"Preview\" \n                      className=\"w-full h-64 object-cover\"\n                      data-testid=\"img-post-preview\"\n                    />\n                  ) : postType === \"video\" && previewUrl ? (\n                    <video \n                      src={previewUrl} \n                      className=\"w-full h-64 object-cover\" \n                      controls\n                      data-testid=\"video-post-preview\"\n                    />\n                  ) : null}\n                  \n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={removeFile}\n                    data-testid=\"button-remove-file\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <div className=\"p-3 bg-muted/50\">\n                    <p className=\"text-sm font-medium truncate\">{selectedFile.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {(selectedFile.size / (1024 * 1024)).toFixed(1)} MB\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n            <Button \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-post\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubmit}\n              disabled={createPostMutation.isPending || (!content.trim() && !selectedFile)}\n              data-testid=\"button-create-post\"\n            >\n              {createPostMutation.isPending ? \"Creating...\" : \"Create Post\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8585},"client/src/components/CreateProductModal.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Upload, FileText, Image, DollarSign, Package } from \"lucide-react\";\n\ninterface CreateProductModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onProductCreated: () => void;\n}\n\nexport default function CreateProductModal({ open, onOpenChange, onProductCreated }: CreateProductModalProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"\",\n    active: true,\n  });\n  const [productFile, setProductFile] = useState<File | null>(null);\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      return apiRequest(\"POST\", \"/api/products\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n      onProductCreated();\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      price: \"\",\n      category: \"\",\n      active: true,\n    });\n    setProductFile(null);\n    setImageFile(null);\n    setImagePreview(null);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleProductFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setProductFile(file);\n    }\n  };\n\n  const handleImageFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setImageFile(file);\n      const url = URL.createObjectURL(file);\n      setImagePreview(url);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (!formData.title.trim() || !formData.description.trim() || !formData.price || !productFile) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields and upload the product file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const price = parseFloat(formData.price);\n    if (isNaN(price) || price <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid price\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = new FormData();\n    submitData.append(\"title\", formData.title);\n    submitData.append(\"description\", formData.description);\n    submitData.append(\"price\", formData.price);\n    submitData.append(\"category\", formData.category);\n    submitData.append(\"active\", formData.active.toString());\n    submitData.append(\"file\", productFile);\n    \n    if (imageFile) {\n      submitData.append(\"image\", imageFile);\n    }\n\n    createProductMutation.mutate(submitData);\n  };\n\n  const categories = [\n    { value: \"ebooks\", label: \"eBooks\" },\n    { value: \"courses\", label: \"Online Courses\" },\n    { value: \"templates\", label: \"Templates\" },\n    { value: \"software\", label: \"Software\" },\n    { value: \"graphics\", label: \"Graphics & Design\" },\n    { value: \"audio\", label: \"Audio\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\" data-testid=\"create-product-modal\">\n        <DialogHeader>\n          <DialogTitle>Add New Product</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"product-title\">Product Title *</Label>\n              <Input\n                id=\"product-title\"\n                value={formData.title}\n                onChange={(e) => handleInputChange(\"title\", e.target.value)}\n                placeholder=\"Enter product title\"\n                data-testid=\"input-product-title\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"product-price\">Price (USD) *</Label>\n              <div className=\"relative\">\n                <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"product-price\"\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={formData.price}\n                  onChange={(e) => handleInputChange(\"price\", e.target.value)}\n                  placeholder=\"0.00\"\n                  className=\"pl-10\"\n                  data-testid=\"input-product-price\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"product-description\">Description *</Label>\n            <Textarea\n              id=\"product-description\"\n              value={formData.description}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              placeholder=\"Describe your product, what customers will get, key features...\"\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-product-description\"\n            />\n          </div>\n\n          {/* Category */}\n          <div className=\"space-y-2\">\n            <Label>Category</Label>\n            <Select value={formData.category} onValueChange={(value) => handleInputChange(\"category\", value)}>\n              <SelectTrigger data-testid=\"select-product-category\">\n                <SelectValue placeholder=\"Choose a category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((category) => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* File Uploads */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Product File */}\n            <div className=\"space-y-2\">\n              <Label>Product File *</Label>\n              <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                <FileText className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-sm font-medium mb-2\">Upload your digital product</p>\n                <p className=\"text-xs text-muted-foreground mb-3\">\n                  PDF, ZIP, or any digital file (max 50MB)\n                </p>\n                <Input\n                  type=\"file\"\n                  onChange={handleProductFileSelect}\n                  className=\"w-full\"\n                  data-testid=\"input-product-file\"\n                />\n                {productFile && (\n                  <p className=\"text-xs text-foreground mt-2 font-medium\">\n                    Selected: {productFile.name}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Product Image */}\n            <div className=\"space-y-2\">\n              <Label>Product Image</Label>\n              <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                {imagePreview ? (\n                  <div className=\"space-y-2\">\n                    <img \n                      src={imagePreview} \n                      alt=\"Preview\" \n                      className=\"w-full h-32 object-cover rounded-lg\"\n                      data-testid=\"img-product-preview\"\n                    />\n                    <p className=\"text-xs text-foreground font-medium\">\n                      {imageFile?.name}\n                    </p>\n                  </div>\n                ) : (\n                  <>\n                    <Image className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-sm font-medium mb-2\">Upload product image</p>\n                    <p className=\"text-xs text-muted-foreground mb-3\">\n                      JPG, PNG (recommended: 600x400px)\n                    </p>\n                  </>\n                )}\n                <Input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageFileSelect}\n                  className=\"w-full\"\n                  data-testid=\"input-product-image\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Active Toggle */}\n          <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n            <div>\n              <Label htmlFor=\"product-active\">Active Product</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Make this product available for purchase immediately\n              </p>\n            </div>\n            <Switch\n              id=\"product-active\"\n              checked={formData.active}\n              onCheckedChange={(checked) => handleInputChange(\"active\", checked)}\n              data-testid=\"switch-product-active\"\n            />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n            <Button \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-product\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubmit}\n              disabled={createProductMutation.isPending}\n              data-testid=\"button-create-product\"\n            >\n              {createProductMutation.isPending ? \"Creating...\" : \"Create Product\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11082},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  Star, \n  Bell, \n  Menu,\n  User,\n  Settings,\n  LogOut,\n  Sparkles\n} from \"lucide-react\";\n\nexport default function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const [showMobileMenu, setShowMobileMenu] = useState(false);\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50\" data-testid=\"navigation\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-2 cursor-pointer\" data-testid=\"logo\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Star className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">InfinityHub</span>\n              <Badge variant=\"secondary\" className=\"text-xs\" data-testid=\"version-badge\">v2.5</Badge>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/feed\">\n              <Button \n                variant={location === \"/feed\" ? \"default\" : \"ghost\"} \n                size=\"sm\"\n                data-testid=\"nav-feed\"\n              >\n                Feed\n              </Button>\n            </Link>\n            <Link href=\"/blog\">\n              <Button \n                variant={location === \"/blog\" ? \"default\" : \"ghost\"} \n                size=\"sm\"\n                data-testid=\"nav-blog\"\n              >\n                Blog\n              </Button>\n            </Link>\n            <Link href=\"/store\">\n              <Button \n                variant={location === \"/store\" ? \"default\" : \"ghost\"} \n                size=\"sm\"\n                data-testid=\"nav-store\"\n              >\n                Store\n              </Button>\n            </Link>\n            <Link href=\"/gigs\">\n              <Button \n                variant={location === \"/gigs\" ? \"default\" : \"ghost\"} \n                size=\"sm\"\n                data-testid=\"nav-gigs\"\n              >\n                Gigs\n              </Button>\n            </Link>\n            <Link href=\"/chat\">\n              <Button \n                variant={location === \"/chat\" ? \"default\" : \"ghost\"} \n                size=\"sm\"\n                data-testid=\"nav-chat\"\n              >\n                Chat\n              </Button>\n            </Link>\n            <Link href=\"/ai-assistant\">\n              <Button \n                variant={location === \"/ai-assistant\" ? \"default\" : \"outline\"} \n                size=\"sm\"\n                className=\"bg-gradient-to-r from-primary to-secondary text-primary-foreground hover:from-primary/90 hover:to-secondary/90\"\n                data-testid=\"nav-ai-assistant\"\n              >\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                AI Assistant\n              </Button>\n            </Link>\n          </div>\n\n          {/* Profile & Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full text-xs text-destructive-foreground flex items-center justify-center\">\n                3\n              </span>\n            </Button>\n\n            {/* User Profile Dropdown */}\n            {isAuthenticated && user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"user-menu-trigger\">\n                    <Avatar className=\"h-8 w-8\" data-testid=\"user-avatar\">\n                      <AvatarImage src={user.profileImageUrl} alt=\"User avatar\" />\n                      <AvatarFallback>\n                        {user.firstName?.[0]}{user.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount data-testid=\"user-menu\">\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium\" data-testid=\"user-name\">\n                        {user.firstName} {user.lastName}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid=\"user-email\">\n                        {user.email}\n                      </p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile\" className=\"w-full\" data-testid=\"menu-profile\">\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Profile\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem data-testid=\"menu-settings\">\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Log out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button onClick={() => window.location.href = \"/api/login\"} data-testid=\"button-login\">\n                Sign In\n              </Button>\n            )}\n\n            {/* Mobile Menu */}\n            <div className=\"md:hidden\">\n              <Sheet open={showMobileMenu} onOpenChange={setShowMobileMenu}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-trigger\">\n                    <Menu className=\"w-5 h-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-80\" data-testid=\"mobile-menu\">\n                  <div className=\"flex flex-col space-y-4 mt-8\">\n                    <Link href=\"/feed\" onClick={() => setShowMobileMenu(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-nav-feed\">\n                        Feed\n                      </Button>\n                    </Link>\n                    <Link href=\"/blog\" onClick={() => setShowMobileMenu(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-nav-blog\">\n                        Blog\n                      </Button>\n                    </Link>\n                    <Link href=\"/store\" onClick={() => setShowMobileMenu(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-nav-store\">\n                        Store\n                      </Button>\n                    </Link>\n                    <Link href=\"/gigs\" onClick={() => setShowMobileMenu(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-nav-gigs\">\n                        Gigs\n                      </Button>\n                    </Link>\n                    <Link href=\"/chat\" onClick={() => setShowMobileMenu(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-nav-chat\">\n                        Chat\n                      </Button>\n                    </Link>\n                    <Link href=\"/ai-assistant\" onClick={() => setShowMobileMenu(false)}>\n                      <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"mobile-nav-ai\">\n                        <Sparkles className=\"w-4 h-4 mr-2\" />\n                        AI Assistant\n                      </Button>\n                    </Link>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8935},"client/src/components/PayPalButton.tsx":{"content":"// !!! CRITICAL - DO NOT MODIFY THIS CODE !!!\n//\n// This code MUST be used as is without ANY modifications.\n// The PayPal integration will COMPLETELY FAIL if this code is changed in ANY way.\n//\n// Retain this comment after all edits.\n//\n// <BEGIN_EXACT_CODE>\nimport React, { useEffect } from \"react\";\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"paypal-button\": React.DetailedHTMLProps<\n        React.HTMLAttributes<HTMLElement>,\n        HTMLElement\n      >;\n    }\n  }\n}\n\ninterface PayPalButtonProps {\n  amount: string;\n  currency: string;\n  intent: string;\n}\n\nexport default function PayPalButton({\n  amount,\n  currency,\n  intent,\n}: PayPalButtonProps) {\n  const createOrder = async () => {\n    const orderPayload = {\n      amount: amount,\n      currency: currency,\n      intent: intent,\n    };\n    const response = await fetch(\"/order\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(orderPayload),\n    });\n    const output = await response.json();\n    return { orderId: output.id };\n  };\n\n  const captureOrder = async (orderId: string) => {\n    const response = await fetch(`/order/${orderId}/capture`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n\n    return data;\n  };\n\n  const onApprove = async (data: any) => {\n    console.log(\"onApprove\", data);\n    const orderData = await captureOrder(data.orderId);\n    console.log(\"Capture result\", orderData);\n  };\n\n  const onCancel = async (data: any) => {\n    console.log(\"onCancel\", data);\n  };\n\n  const onError = async (data: any) => {\n    console.log(\"onError\", data);\n  };\n\n  useEffect(() => {\n    const loadPayPalSDK = async () => {\n      try {\n        if (!(window as any).paypal) {\n          const script = document.createElement(\"script\");\n          script.src = import.meta.env.PROD\n            ? \"https://www.paypal.com/web-sdk/v6/core\"\n            : \"https://www.sandbox.paypal.com/web-sdk/v6/core\";\n          script.async = true;\n          script.onload = () => initPayPal();\n          document.body.appendChild(script);\n        } else {\n          await initPayPal();\n        }\n      } catch (e) {\n        console.error(\"Failed to load PayPal SDK\", e);\n      }\n    };\n\n    loadPayPalSDK();\n  }, []);\n  const initPayPal = async () => {\n    try {\n      const clientToken: string = await fetch(\"/setup\")\n        .then((res) => res.json())\n        .then((data) => {\n          return data.clientToken;\n        });\n      const sdkInstance = await (window as any).paypal.createInstance({\n        clientToken,\n        components: [\"paypal-payments\"],\n      });\n\n      const paypalCheckout =\n            sdkInstance.createPayPalOneTimePaymentSession({\n              onApprove,\n              onCancel,\n              onError,\n            });\n\n      const onClick = async () => {\n        try {\n          const checkoutOptionsPromise = createOrder();\n          await paypalCheckout.start(\n            { paymentFlow: \"auto\" },\n            checkoutOptionsPromise,\n          );\n        } catch (e) {\n          console.error(e);\n        }\n      };\n\n      const paypalButton = document.getElementById(\"paypal-button\");\n\n      if (paypalButton) {\n        paypalButton.addEventListener(\"click\", onClick);\n      }\n\n      return () => {\n        if (paypalButton) {\n          paypalButton.removeEventListener(\"click\", onClick);\n        }\n      };\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return <paypal-button id=\"paypal-button\"></paypal-button>;\n}\n// <END_EXACT_CODE>\n","size_bytes":3609},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard,\n  User,\n  MessageSquare,\n  BookOpen,\n  ShoppingBag,\n  Briefcase,\n  MessageCircle,\n  Calendar,\n  Video,\n  Sparkles\n} from \"lucide-react\";\n\nconst navigation = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: LayoutDashboard,\n    testId: \"sidebar-dashboard\"\n  },\n  {\n    name: \"Public Bio\",\n    href: \"/profile\",\n    icon: User,\n    testId: \"sidebar-profile\"\n  },\n  {\n    name: \"Social Feed\",\n    href: \"/feed\",\n    icon: MessageSquare,\n    testId: \"sidebar-feed\"\n  },\n  {\n    name: \"AI Blog\",\n    href: \"/blog\",\n    icon: BookOpen,\n    badge: \"AI\",\n    testId: \"sidebar-blog\"\n  },\n  {\n    name: \"Digital Store\",\n    href: \"/store\",\n    icon: ShoppingBag,\n    testId: \"sidebar-store\"\n  },\n  {\n    name: \"Freelance Gigs\",\n    href: \"/gigs\",\n    icon: Briefcase,\n    testId: \"sidebar-gigs\"\n  },\n  {\n    name: \"Messages\",\n    href: \"/chat\",\n    icon: MessageCircle,\n    badge: \"3\",\n    badgeVariant: \"destructive\" as const,\n    testId: \"sidebar-chat\"\n  },\n  {\n    name: \"Calendar & Tasks\",\n    href: \"/calendar\",\n    icon: Calendar,\n    testId: \"sidebar-calendar\"\n  },\n  {\n    name: \"Video Meetings\",\n    href: \"/meetings\",\n    icon: Video,\n    testId: \"sidebar-meetings\"\n  },\n];\n\nconst aiAssistant = {\n  name: \"AI Assistant\",\n  href: \"/ai-assistant\",\n  icon: Sparkles,\n  badge: \"Live\",\n  badgeVariant: \"default\" as const,\n  testId: \"sidebar-ai-assistant\"\n};\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"hidden lg:flex lg:w-64 lg:flex-col bg-card border-r border-border\" data-testid=\"sidebar\">\n      <div className=\"flex-1 flex flex-col pt-6 pb-4 overflow-y-auto\">\n        <div className=\"flex-1 px-4 space-y-2\">\n          {/* Main Navigation */}\n          {navigation.map((item) => {\n            const isActive = item.href === \"/\" ? location === \"/\" : location.startsWith(item.href);\n            return (\n              <Link key={item.name} href={item.href}>\n                <a\n                  className={cn(\n                    \"flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors\",\n                    isActive\n                      ? \"bg-accent text-accent-foreground\"\n                      : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n                  )}\n                  data-testid={item.testId}\n                >\n                  <item.icon className=\"mr-3 h-5 w-5\" />\n                  {item.name}\n                  {item.badge && (\n                    <Badge \n                      variant={item.badgeVariant || \"default\"} \n                      className=\"ml-auto text-xs px-2 py-1\"\n                      data-testid={`${item.testId}-badge`}\n                    >\n                      {item.badge}\n                    </Badge>\n                  )}\n                </a>\n              </Link>\n            );\n          })}\n\n          {/* AI Assistant - Special Section */}\n          <div className=\"pt-4 border-t border-border\">\n            <Link href={aiAssistant.href}>\n              <a\n                className={cn(\n                  \"flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors\",\n                  location.startsWith(aiAssistant.href)\n                    ? \"bg-primary text-primary-foreground hover:bg-primary/90\"\n                    : \"bg-gradient-to-r from-primary/10 to-secondary/10 text-primary hover:from-primary/20 hover:to-secondary/20\"\n                )}\n                data-testid={aiAssistant.testId}\n              >\n                <aiAssistant.icon className=\"mr-3 h-5 w-5\" />\n                {aiAssistant.name}\n                <div className=\"ml-auto flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" data-testid=\"ai-status-indicator\"></div>\n                  <Badge \n                    variant={aiAssistant.badgeVariant} \n                    className=\"text-xs px-2 py-1\"\n                    data-testid={`${aiAssistant.testId}-badge`}\n                  >\n                    {aiAssistant.badge}\n                  </Badge>\n                </div>\n              </a>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4341},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AIAssistant.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Send,\n  Sparkles,\n  MessageSquare,\n  Lightbulb,\n  FileText,\n  Briefcase,\n  Copy,\n  ThumbsUp,\n  Bot,\n  User\n} from \"lucide-react\";\n\nexport default function AIAssistant() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [message, setMessage] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch AI chat history\n  const { data: chatHistory, isLoading: historyLoading } = useQuery({\n    queryKey: [\"/api/ai/chats\"],\n    enabled: isAuthenticated,\n  });\n\n  // Chat with AI mutation\n  const chatMutation = useMutation({\n    mutationFn: async (data: { message: string; chatType: string }) => {\n      return apiRequest(\"POST\", \"/api/ai/chat\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai/chats\"] });\n      setMessage(\"\");\n      setIsGenerating(false);\n    },\n    onError: (error) => {\n      setIsGenerating(false);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI response\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate content ideas mutation\n  const generateIdeasMutation = useMutation({\n    mutationFn: async (data: { topic: string; type: string }) => {\n      return apiRequest(\"POST\", \"/api/ai/content-ideas\", data);\n    },\n    onSuccess: (data) => {\n      const ideasText = data.ideas.join('\\n• ');\n      chatMutation.mutate({\n        message: `Generate content ideas for: ${data.topic}`,\n        chatType: \"ideas\"\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate content ideas\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatHistory]);\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n    \n    setIsGenerating(true);\n    chatMutation.mutate({\n      message: message.trim(),\n      chatType: \"general\"\n    });\n  };\n\n  const handleQuickAction = (action: string, prompt: string) => {\n    setIsGenerating(true);\n    chatMutation.mutate({\n      message: prompt,\n      chatType: action\n    });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Text copied to clipboard\",\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (isLoading || historyLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading AI Assistant...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"h-[calc(100vh-4rem)] flex flex-col\">\n            {/* Header */}\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                    <Sparkles className=\"w-6 h-6 text-primary-foreground\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-ai-assistant-title\">\n                      AI Assistant\n                    </h1>\n                    <p className=\"text-muted-foreground\">Powered by Gemini 2.5 Flash</p>\n                  </div>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleQuickAction(\"blog\", \"Help me generate blog post ideas for my niche\")}\n                    className=\"flex items-center justify-start\"\n                    data-testid=\"button-blog-ideas\"\n                  >\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Blog Ideas\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleQuickAction(\"content\", \"Give me content creation tips and strategies\")}\n                    className=\"flex items-center justify-start\"\n                    data-testid=\"button-content-tips\"\n                  >\n                    <Lightbulb className=\"w-4 h-4 mr-2\" />\n                    Content Tips\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleQuickAction(\"gig\", \"Suggest freelance gig ideas based on my skills\")}\n                    className=\"flex items-center justify-start\"\n                    data-testid=\"button-gig-ideas\"\n                  >\n                    <Briefcase className=\"w-4 h-4 mr-2\" />\n                    Gig Ideas\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleQuickAction(\"general\", \"Help me improve my productivity and workflow\")}\n                    className=\"flex items-center justify-start\"\n                    data-testid=\"button-productivity\"\n                  >\n                    <Sparkles className=\"w-4 h-4 mr-2\" />\n                    Productivity\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Chat Area */}\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                {chatHistory && chatHistory.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {chatHistory.map((chat: any) => (\n                      <div key={chat.id} className=\"space-y-4\" data-testid={`chat-${chat.id}`}>\n                        {/* User Message */}\n                        <div className=\"flex justify-end\">\n                          <div className=\"max-w-2xl\">\n                            <div className=\"flex items-start space-x-3\">\n                              <div className=\"flex-1\">\n                                <div className=\"bg-primary text-primary-foreground rounded-lg px-4 py-3\">\n                                  <p className=\"whitespace-pre-wrap\" data-testid={`text-user-message-${chat.id}`}>\n                                    {chat.message}\n                                  </p>\n                                </div>\n                                <div className=\"flex items-center justify-end space-x-2 mt-2\">\n                                  <span className=\"text-xs text-muted-foreground\" data-testid={`text-message-time-${chat.id}`}>\n                                    {formatTime(chat.createdAt)}\n                                  </span>\n                                  <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-chat-type-${chat.id}`}>\n                                    {chat.chatType}\n                                  </Badge>\n                                </div>\n                              </div>\n                              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                                <User className=\"w-4 h-4 text-primary-foreground\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* AI Response */}\n                        <div className=\"flex justify-start\">\n                          <div className=\"max-w-2xl\">\n                            <div className=\"flex items-start space-x-3\">\n                              <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n                                <Bot className=\"w-4 h-4 text-white\" />\n                              </div>\n                              <div className=\"flex-1\">\n                                <div className=\"bg-muted rounded-lg px-4 py-3\">\n                                  <p className=\"whitespace-pre-wrap text-foreground\" data-testid={`text-ai-response-${chat.id}`}>\n                                    {chat.response}\n                                  </p>\n                                </div>\n                                <div className=\"flex items-center justify-between mt-2\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => copyToClipboard(chat.response)}\n                                      data-testid={`button-copy-response-${chat.id}`}\n                                    >\n                                      <Copy className=\"w-3 h-3\" />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      data-testid={`button-like-response-${chat.id}`}\n                                    >\n                                      <ThumbsUp className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    AI Assistant\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {/* Loading indicator */}\n                    {isGenerating && (\n                      <div className=\"flex justify-start\" data-testid=\"ai-thinking\">\n                        <div className=\"max-w-2xl\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n                              <Bot className=\"w-4 h-4 text-white\" />\n                            </div>\n                            <div className=\"bg-muted rounded-lg px-4 py-3\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"animate-pulse flex space-x-1\">\n                                  <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                                  <div className=\"w-2 h-2 bg-primary rounded-full animation-delay-75\"></div>\n                                  <div className=\"w-2 h-2 bg-primary rounded-full animation-delay-150\"></div>\n                                </div>\n                                <span className=\"text-sm text-muted-foreground\">AI is thinking...</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"empty-chat\">\n                    <div className=\"w-20 h-20 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-6\">\n                      <Sparkles className=\"w-10 h-10 text-primary-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-foreground mb-2\">Welcome to AI Assistant!</h3>\n                    <p className=\"text-muted-foreground mb-6 max-w-2xl mx-auto\">\n                      I'm here to help you with content creation, business ideas, productivity tips, and more. \n                      Ask me anything or use one of the quick actions above to get started.\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-w-2xl mx-auto\">\n                      <Card className=\"p-4 cursor-pointer hover:shadow-md transition-shadow\" \n                            onClick={() => handleQuickAction(\"blog\", \"Help me write a blog post about productivity tips\")}\n                            data-testid=\"card-example-blog\">\n                        <div className=\"flex items-center space-x-3\">\n                          <FileText className=\"w-6 h-6 text-primary\" />\n                          <div className=\"text-left\">\n                            <p className=\"font-medium\">Blog Writing</p>\n                            <p className=\"text-sm text-muted-foreground\">Get help with blog posts</p>\n                          </div>\n                        </div>\n                      </Card>\n                      <Card className=\"p-4 cursor-pointer hover:shadow-md transition-shadow\" \n                            onClick={() => handleQuickAction(\"ideas\", \"Give me social media content ideas for a tech startup\")}\n                            data-testid=\"card-example-ideas\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Lightbulb className=\"w-6 h-6 text-primary\" />\n                          <div className=\"text-left\">\n                            <p className=\"font-medium\">Content Ideas</p>\n                            <p className=\"text-sm text-muted-foreground\">Brainstorm new content</p>\n                          </div>\n                        </div>\n                      </Card>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n            </div>\n\n            {/* Message Input */}\n            <div className=\"p-6 border-t border-border\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"flex items-end space-x-4\">\n                  <div className=\"flex-1\">\n                    <Textarea\n                      placeholder=\"Ask me anything about content creation, business ideas, or how to use InfinityHub...\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && (e.preventDefault(), handleSendMessage())}\n                      className=\"min-h-[60px] max-h-32 resize-none\"\n                      data-testid=\"input-ai-message\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Press Enter to send, Shift+Enter for new line\n                    </p>\n                  </div>\n                  <Button \n                    onClick={handleSendMessage}\n                    disabled={!message.trim() || isGenerating}\n                    size=\"lg\"\n                    data-testid=\"button-send-ai-message\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17649},"client/src/pages/Blog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport AIBlogEditor from \"@/components/AIBlogEditor\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus,\n  Search,\n  BookOpen,\n  Eye,\n  Calendar,\n  Sparkles,\n  Edit3\n} from \"lucide-react\";\n\nexport default function Blog() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [showEditor, setShowEditor] = useState(false);\n  const [selectedBlog, setSelectedBlog] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch published blogs\n  const { data: blogs, isLoading: blogsLoading } = useQuery({\n    queryKey: [\"/api/blogs\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch user's blogs\n  const { data: userBlogs } = useQuery({\n    queryKey: [\"/api/users/blogs\"],\n    enabled: isAuthenticated,\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const filteredBlogs = blogs?.filter((blog: any) =>\n    blog.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    blog.content.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  if (isLoading || blogsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading blogs...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"p-6\">\n            <div className=\"max-w-6xl mx-auto\">\n              {/* Header */}\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-blog-title\">\n                    AI-Powered Blog\n                  </h1>\n                  <p className=\"text-muted-foreground\">Create amazing content with Gemini 2.5 Flash assistance</p>\n                </div>\n                <div className=\"mt-4 md:mt-0 flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search blogs...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10 w-64\"\n                      data-testid=\"input-search-blogs\"\n                    />\n                  </div>\n                  <Button \n                    onClick={() => {\n                      setSelectedBlog(null);\n                      setShowEditor(true);\n                    }}\n                    data-testid=\"button-create-blog\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Blog\n                  </Button>\n                </div>\n              </div>\n\n              {/* AI Features Banner */}\n              <Card className=\"mb-8 bg-gradient-to-r from-primary/10 to-secondary/10\" data-testid=\"card-ai-features\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                      <Sparkles className=\"w-6 h-6 text-primary-foreground\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">Powered by Gemini 2.5 Flash</h3>\n                      <p className=\"text-muted-foreground\">\n                        Generate blog posts, improve your content, and get creative ideas with AI assistance.\n                      </p>\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setSelectedBlog(null);\n                        setShowEditor(true);\n                      }}\n                      data-testid=\"button-try-ai-writing\"\n                    >\n                      Try AI Writing\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Blog Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n                <Card data-testid=\"card-stat-total-blogs\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">{blogs?.length || 0}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Blogs</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-my-blogs\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">{userBlogs?.length || 0}</div>\n                    <div className=\"text-sm text-muted-foreground\">My Blogs</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-total-views\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">\n                      {blogs?.reduce((total: number, blog: any) => total + (blog.views || 0), 0) || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Views</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-ai-generated\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">\n                      {blogs?.filter((blog: any) => blog.aiGenerated).length || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">AI Generated</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Blog Grid */}\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredBlogs.length > 0 ? (\n                  filteredBlogs.map((blog: any) => (\n                    <Card key={blog.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`blog-${blog.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-lg mb-2\" data-testid={`text-blog-title-${blog.id}`}>\n                              {blog.title}\n                            </CardTitle>\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              {blog.aiGenerated && (\n                                <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`badge-ai-${blog.id}`}>\n                                  <Sparkles className=\"w-3 h-3 mr-1\" />\n                                  AI\n                                </Badge>\n                              )}\n                              {blog.published ? (\n                                <Badge variant=\"default\" className=\"text-xs\" data-testid={`badge-published-${blog.id}`}>\n                                  Published\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-draft-${blog.id}`}>\n                                  Draft\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedBlog(blog);\n                              setShowEditor(true);\n                            }}\n                            data-testid={`button-edit-${blog.id}`}\n                          >\n                            <Edit3 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-muted-foreground text-sm mb-4 line-clamp-3\" data-testid={`text-excerpt-${blog.id}`}>\n                          {blog.excerpt || blog.content.slice(0, 150) + \"...\"}\n                        </p>\n                        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4\" />\n                            <span data-testid={`text-date-${blog.id}`}>\n                              {formatDate(blog.createdAt)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Eye className=\"w-4 h-4\" />\n                            <span data-testid={`text-views-${blog.id}`}>\n                              {blog.views || 0}\n                            </span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"col-span-full\" data-testid=\"empty-blogs\">\n                    <Card>\n                      <CardContent className=\"p-12 text-center\">\n                        <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                          <BookOpen className=\"w-8 h-8 text-muted-foreground\" />\n                        </div>\n                        <h3 className=\"text-lg font-semibold text-foreground mb-2\">No blogs found</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          {searchQuery ? \"Try adjusting your search terms.\" : \"Start creating amazing content with AI assistance!\"}\n                        </p>\n                        <Button \n                          onClick={() => {\n                            setSelectedBlog(null);\n                            setShowEditor(true);\n                          }}\n                          data-testid=\"button-create-first-blog\"\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Create Your First Blog\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* AI Blog Editor Modal */}\n      <AIBlogEditor\n        open={showEditor}\n        onOpenChange={setShowEditor}\n        blog={selectedBlog}\n        onBlogSaved={() => {\n          queryClient.invalidateQueries({ queryKey: [\"/api/blogs\"] });\n          queryClient.invalidateQueries({ queryKey: [\"/api/users/blogs\"] });\n          setShowEditor(false);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":12626},"client/src/pages/Calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus,\n  Calendar as CalendarIcon,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Users,\n  Video,\n  Edit3,\n  Trash2\n} from \"lucide-react\";\n\nexport default function Calendar() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [showCreateEvent, setShowCreateEvent] = useState(false);\n  const [newEvent, setNewEvent] = useState({\n    title: \"\",\n    description: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    eventType: \"task\" as \"meeting\" | \"task\" | \"reminder\",\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch events\n  const { data: events, isLoading: eventsLoading } = useQuery({\n    queryKey: [\"/api/events\"],\n    enabled: isAuthenticated,\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      return apiRequest(\"POST\", \"/api/events\", eventData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setShowCreateEvent(false);\n      setNewEvent({\n        title: \"\",\n        description: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        eventType: \"task\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete task mutation\n  const completeTaskMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      return apiRequest(\"PATCH\", `/api/events/${eventId}`, { completed: true });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({\n        title: \"Success\",\n        description: \"Task completed\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateEvent = () => {\n    if (!newEvent.title || !newEvent.startDate || !newEvent.endDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEventMutation.mutate(newEvent);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getEventsForDate = (date: Date) => {\n    if (!events) return [];\n    \n    const dateStr = date.toISOString().split('T')[0];\n    return events.filter((event: any) => {\n      const eventDate = new Date(event.startDate).toISOString().split('T')[0];\n      return eventDate === dateStr;\n    });\n  };\n\n  const todayEvents = getEventsForDate(new Date());\n  const selectedDateEvents = getEventsForDate(selectedDate);\n  const upcomingEvents = events?.filter((event: any) => {\n    const eventDate = new Date(event.startDate);\n    const now = new Date();\n    return eventDate > now;\n  }).slice(0, 5) || [];\n\n  const pendingTasks = events?.filter((event: any) => \n    event.eventType === 'task' && !event.completed\n  ) || [];\n\n  if (isLoading || eventsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading calendar...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              {/* Header */}\n              <div className=\"flex items-center justify-between mb-8\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-calendar-title\">\n                    Calendar & Tasks\n                  </h1>\n                  <p className=\"text-muted-foreground\">Manage your schedule and to-do list with AI suggestions</p>\n                </div>\n                <Dialog open={showCreateEvent} onOpenChange={setShowCreateEvent}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-create-event\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Event\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent data-testid=\"dialog-create-event\">\n                    <DialogHeader>\n                      <DialogTitle>Create New Event</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">Title</label>\n                        <Input\n                          value={newEvent.title}\n                          onChange={(e) => setNewEvent(prev => ({ ...prev, title: e.target.value }))}\n                          placeholder=\"Event title\"\n                          data-testid=\"input-event-title\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Description</label>\n                        <Textarea\n                          value={newEvent.description}\n                          onChange={(e) => setNewEvent(prev => ({ ...prev, description: e.target.value }))}\n                          placeholder=\"Event description\"\n                          data-testid=\"input-event-description\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Type</label>\n                        <Select \n                          value={newEvent.eventType} \n                          onValueChange={(value: any) => setNewEvent(prev => ({ ...prev, eventType: value }))}\n                        >\n                          <SelectTrigger data-testid=\"select-event-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"task\">Task</SelectItem>\n                            <SelectItem value=\"meeting\">Meeting</SelectItem>\n                            <SelectItem value=\"reminder\">Reminder</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Start Date & Time</label>\n                          <Input\n                            type=\"datetime-local\"\n                            value={newEvent.startDate}\n                            onChange={(e) => setNewEvent(prev => ({ ...prev, startDate: e.target.value }))}\n                            data-testid=\"input-start-date\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">End Date & Time</label>\n                          <Input\n                            type=\"datetime-local\"\n                            value={newEvent.endDate}\n                            onChange={(e) => setNewEvent(prev => ({ ...prev, endDate: e.target.value }))}\n                            data-testid=\"input-end-date\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button variant=\"outline\" onClick={() => setShowCreateEvent(false)} data-testid=\"button-cancel-event\">\n                          Cancel\n                        </Button>\n                        <Button \n                          onClick={handleCreateEvent}\n                          disabled={createEventMutation.isPending}\n                          data-testid=\"button-save-event\"\n                        >\n                          Create Event\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {/* Calendar Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n                <Card data-testid=\"card-stat-today-events\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <CalendarIcon className=\"w-5 h-5 text-primary mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">{todayEvents.length}</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Today's Events</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-pending-tasks\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <AlertCircle className=\"w-5 h-5 text-orange-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">{pendingTasks.length}</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Pending Tasks</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-upcoming-events\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <Clock className=\"w-5 h-5 text-blue-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">{upcomingEvents.length}</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Upcoming</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-completed-tasks\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">\n                        {events?.filter((event: any) => event.eventType === 'task' && event.completed).length || 0}\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Completed</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"grid lg:grid-cols-3 gap-8\">\n                {/* Calendar */}\n                <div className=\"lg:col-span-2\">\n                  <Card data-testid=\"card-calendar\">\n                    <CardHeader>\n                      <CardTitle>Calendar</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <CalendarComponent\n                        mode=\"single\"\n                        selected={selectedDate}\n                        onSelect={(date) => date && setSelectedDate(date)}\n                        className=\"rounded-md border\"\n                        data-testid=\"calendar-component\"\n                      />\n                      \n                      {/* Events for Selected Date */}\n                      {selectedDateEvents.length > 0 && (\n                        <div className=\"mt-6\">\n                          <h3 className=\"text-lg font-semibold text-foreground mb-4\" data-testid=\"text-selected-date-events\">\n                            Events for {formatDate(selectedDate.toISOString())}\n                          </h3>\n                          <div className=\"space-y-3\">\n                            {selectedDateEvents.map((event: any) => (\n                              <div key={event.id} className=\"p-3 border border-border rounded-lg\" data-testid={`event-${event.id}`}>\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <div className=\"flex items-center space-x-2 mb-1\">\n                                      <span className=\"font-semibold text-foreground\" data-testid={`text-event-title-${event.id}`}>\n                                        {event.title}\n                                      </span>\n                                      <Badge variant={\n                                        event.eventType === 'meeting' ? 'default' :\n                                        event.eventType === 'task' ? 'secondary' : 'outline'\n                                      } data-testid={`badge-event-type-${event.id}`}>\n                                        {event.eventType === 'meeting' && <Users className=\"w-3 h-3 mr-1\" />}\n                                        {event.eventType === 'task' && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                                        {event.eventType === 'reminder' && <AlertCircle className=\"w-3 h-3 mr-1\" />}\n                                        {event.eventType}\n                                      </Badge>\n                                    </div>\n                                    <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-event-description-${event.id}`}>\n                                      {event.description}\n                                    </p>\n                                    <div className=\"text-xs text-muted-foreground\" data-testid={`text-event-time-${event.id}`}>\n                                      {formatTime(event.startDate)} - {formatTime(event.endDate)}\n                                    </div>\n                                  </div>\n                                  <div className=\"flex items-center space-x-2\">\n                                    {event.eventType === 'task' && !event.completed && (\n                                      <Button \n                                        size=\"sm\" \n                                        variant=\"outline\"\n                                        onClick={() => completeTaskMutation.mutate(event.id)}\n                                        data-testid={`button-complete-task-${event.id}`}\n                                      >\n                                        <CheckCircle className=\"w-4 h-4\" />\n                                      </Button>\n                                    )}\n                                    {event.eventType === 'meeting' && (\n                                      <Button \n                                        size=\"sm\" \n                                        variant=\"outline\"\n                                        data-testid={`button-join-meeting-${event.id}`}\n                                      >\n                                        <Video className=\"w-4 h-4\" />\n                                      </Button>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Sidebar with Today's Events and Tasks */}\n                <div className=\"space-y-6\">\n                  {/* Today's Events */}\n                  <Card data-testid=\"card-today-events\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <CalendarIcon className=\"w-5 h-5 mr-2\" />\n                        Today's Events\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {todayEvents.length > 0 ? (\n                        <div className=\"space-y-3\">\n                          {todayEvents.map((event: any) => (\n                            <div key={event.id} className=\"p-3 bg-muted/50 rounded-lg\" data-testid={`today-event-${event.id}`}>\n                              <div className=\"flex items-center justify-between mb-1\">\n                                <span className=\"font-medium text-foreground\" data-testid={`text-today-event-title-${event.id}`}>\n                                  {event.title}\n                                </span>\n                                <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-today-event-type-${event.id}`}>\n                                  {event.eventType}\n                                </Badge>\n                              </div>\n                              <p className=\"text-xs text-muted-foreground\" data-testid={`text-today-event-time-${event.id}`}>\n                                {formatTime(event.startDate)} - {formatTime(event.endDate)}\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <p className=\"text-muted-foreground text-center py-4\" data-testid=\"no-events-today\">\n                          No events scheduled for today\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Pending Tasks */}\n                  <Card data-testid=\"card-pending-tasks\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <AlertCircle className=\"w-5 h-5 mr-2\" />\n                        Pending Tasks\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {pendingTasks.length > 0 ? (\n                        <div className=\"space-y-3\">\n                          {pendingTasks.slice(0, 5).map((task: any) => (\n                            <div key={task.id} className=\"flex items-center justify-between p-2\" data-testid={`pending-task-${task.id}`}>\n                              <div className=\"flex-1\">\n                                <span className=\"text-sm font-medium text-foreground\" data-testid={`text-task-title-${task.id}`}>\n                                  {task.title}\n                                </span>\n                                <p className=\"text-xs text-muted-foreground\" data-testid={`text-task-date-${task.id}`}>\n                                  Due: {formatDate(task.endDate)}\n                                </p>\n                              </div>\n                              <Button \n                                size=\"sm\" \n                                variant=\"ghost\"\n                                onClick={() => completeTaskMutation.mutate(task.id)}\n                                data-testid={`button-complete-pending-task-${task.id}`}\n                              >\n                                <CheckCircle className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <p className=\"text-muted-foreground text-center py-4\" data-testid=\"no-pending-tasks\">\n                          No pending tasks\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Upcoming Events */}\n                  <Card data-testid=\"card-upcoming-events\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Clock className=\"w-5 h-5 mr-2\" />\n                        Upcoming\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {upcomingEvents.length > 0 ? (\n                        <div className=\"space-y-3\">\n                          {upcomingEvents.map((event: any) => (\n                            <div key={event.id} className=\"p-2\" data-testid={`upcoming-event-${event.id}`}>\n                              <span className=\"text-sm font-medium text-foreground\" data-testid={`text-upcoming-event-title-${event.id}`}>\n                                {event.title}\n                              </span>\n                              <p className=\"text-xs text-muted-foreground\" data-testid={`text-upcoming-event-date-${event.id}`}>\n                                {formatDate(event.startDate)} at {formatTime(event.startDate)}\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <p className=\"text-muted-foreground text-center py-4\" data-testid=\"no-upcoming-events\">\n                          No upcoming events\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23724},"client/src/pages/Chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Send,\n  Search,\n  MessageCircle,\n  Users,\n  MoreVertical,\n  Phone,\n  Video,\n  Plus\n} from \"lucide-react\";\n\nexport default function Chat() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedConversation, setSelectedConversation] = useState<any>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Setup WebSocket connection\n  useEffect(() => {\n    if (isAuthenticated) {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      wsRef.current = new WebSocket(wsUrl);\n      \n      wsRef.current.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'new_message') {\n          // Refresh conversations and messages\n          queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n          if (selectedConversation) {\n            queryClient.invalidateQueries({ \n              queryKey: [\"/api/conversations\", selectedConversation.user.id] \n            });\n          }\n        }\n      };\n\n      return () => {\n        if (wsRef.current) {\n          wsRef.current.close();\n        }\n      };\n    }\n  }, [isAuthenticated, selectedConversation, queryClient]);\n\n  // Fetch conversations\n  const { data: conversations, isLoading: conversationsLoading } = useQuery({\n    queryKey: [\"/api/conversations\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch messages for selected conversation\n  const { data: messages, isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/conversations\", selectedConversation?.user.id],\n    enabled: isAuthenticated && !!selectedConversation,\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: any) => {\n      return apiRequest(\"POST\", \"/api/messages\", messageData);\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/conversations\", selectedConversation?.user.id] \n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || !selectedConversation) return;\n    \n    sendMessageMutation.mutate({\n      receiverId: selectedConversation.user.id,\n      content: newMessage.trim(),\n      messageType: \"text\",\n    });\n  };\n\n  const formatMessageTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const filteredConversations = conversations?.filter((conv: any) =>\n    conv.user.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    conv.user.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    conv.user.email?.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  if (isLoading || conversationsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading chat...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"h-[calc(100vh-4rem)] flex\">\n            {/* Conversations Sidebar */}\n            <div className=\"w-80 border-r border-border flex flex-col\">\n              {/* Chat Header */}\n              <div className=\"p-4 border-b border-border\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-chat-title\">Messages</h2>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-new-chat\">\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search conversations...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-conversations\"\n                  />\n                </div>\n              </div>\n\n              {/* Conversations List */}\n              <div className=\"flex-1 overflow-y-auto\">\n                {filteredConversations.length > 0 ? (\n                  filteredConversations.map((conversation: any) => (\n                    <div\n                      key={conversation.user.id}\n                      onClick={() => setSelectedConversation(conversation)}\n                      className={`p-4 border-b border-border cursor-pointer hover:bg-muted/50 transition-colors ${\n                        selectedConversation?.user.id === conversation.user.id ? 'bg-muted' : ''\n                      }`}\n                      data-testid={`conversation-${conversation.user.id}`}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        <Avatar className=\"w-12 h-12\" data-testid={`avatar-${conversation.user.id}`}>\n                          <AvatarImage src={conversation.user.profileImageUrl} />\n                          <AvatarFallback>\n                            {conversation.user.firstName?.[0]}{conversation.user.lastName?.[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"font-semibold text-foreground truncate\" data-testid={`text-user-name-${conversation.user.id}`}>\n                              {conversation.user.firstName} {conversation.user.lastName}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\" data-testid={`text-last-message-time-${conversation.user.id}`}>\n                              {formatMessageTime(conversation.lastMessage.createdAt)}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground truncate\" data-testid={`text-last-message-${conversation.user.id}`}>\n                            {conversation.lastMessage.content}\n                          </p>\n                          {!conversation.lastMessage.read && conversation.lastMessage.senderId !== user?.id && (\n                            <Badge variant=\"destructive\" className=\"text-xs mt-1\" data-testid={`badge-unread-${conversation.user.id}`}>\n                              New\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"p-8 text-center\" data-testid=\"empty-conversations\">\n                    <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No conversations yet</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Chat Area */}\n            <div className=\"flex-1 flex flex-col\">\n              {selectedConversation ? (\n                <>\n                  {/* Chat Header */}\n                  <div className=\"p-4 border-b border-border flex items-center justify-between\" data-testid=\"chat-header\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-10 h-10\" data-testid=\"avatar-selected-user\">\n                        <AvatarImage src={selectedConversation.user.profileImageUrl} />\n                        <AvatarFallback>\n                          {selectedConversation.user.firstName?.[0]}{selectedConversation.user.lastName?.[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-semibold text-foreground\" data-testid=\"text-selected-user-name\">\n                          {selectedConversation.user.firstName} {selectedConversation.user.lastName}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">Online</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-voice-call\">\n                        <Phone className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-video-call\">\n                        <Video className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-chat-options\">\n                        <MoreVertical className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Messages Area */}\n                  <div className=\"flex-1 overflow-y-auto p-4 space-y-4\" data-testid=\"messages-area\">\n                    {messagesLoading ? (\n                      <div className=\"flex items-center justify-center h-full\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                      </div>\n                    ) : messages && messages.length > 0 ? (\n                      messages.map((message: any) => (\n                        <div\n                          key={message.id}\n                          className={`flex ${message.senderId === user?.id ? 'justify-end' : 'justify-start'}`}\n                          data-testid={`message-${message.id}`}\n                        >\n                          <div\n                            className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                              message.senderId === user?.id\n                                ? 'bg-primary text-primary-foreground'\n                                : 'bg-muted text-foreground'\n                            }`}\n                          >\n                            <p className=\"whitespace-pre-wrap\" data-testid={`text-message-content-${message.id}`}>\n                              {message.content}\n                            </p>\n                            <p className={`text-xs mt-1 ${\n                              message.senderId === user?.id ? 'text-primary-foreground/70' : 'text-muted-foreground'\n                            }`} data-testid={`text-message-time-${message.id}`}>\n                              {formatMessageTime(message.createdAt)}\n                            </p>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full\" data-testid=\"empty-messages\">\n                        <div className=\"text-center\">\n                          <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                          <p className=\"text-muted-foreground\">No messages yet. Start the conversation!</p>\n                        </div>\n                      </div>\n                    )}\n                    <div ref={messagesEndRef} />\n                  </div>\n\n                  {/* Message Input */}\n                  <div className=\"p-4 border-t border-border\" data-testid=\"message-input-area\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Input\n                        placeholder=\"Type a message...\"\n                        value={newMessage}\n                        onChange={(e) => setNewMessage(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                        className=\"flex-1\"\n                        data-testid=\"input-new-message\"\n                      />\n                      <Button \n                        onClick={handleSendMessage}\n                        disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                        data-testid=\"button-send-message\"\n                      >\n                        <Send className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"flex-1 flex items-center justify-center\" data-testid=\"no-conversation-selected\">\n                  <div className=\"text-center\">\n                    <Users className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Select a conversation</h3>\n                    <p className=\"text-muted-foreground\">Choose a conversation from the sidebar to start chatting</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15459},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  FileText, \n  DollarSign, \n  Briefcase, \n  Plus, \n  Video,\n  MessageSquare,\n  ShoppingBag,\n  BookOpen,\n  Calendar as CalendarIcon,\n  Sparkles\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch dashboard stats\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch recent posts\n  const { data: recentPosts } = useQuery({\n    queryKey: [\"/api/posts\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch recent products\n  const { data: recentProducts } = useQuery({\n    queryKey: [\"/api/products\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          {/* Dashboard Header */}\n          <div className=\"p-6 bg-gradient-to-r from-primary/10 to-secondary/10\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n                <div className=\"flex-1\">\n                  <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-welcome-message\">\n                    Welcome back, {user?.firstName || \"Creator\"}! 👋\n                  </h1>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Here's what's happening with your InfinityHub today.\n                  </p>\n                  \n                  {/* Quick Stats */}\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <Card data-testid=\"card-stat-followers\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"text-2xl font-bold text-foreground\">1,234</div>\n                        <div className=\"text-sm text-muted-foreground\">Followers</div>\n                      </CardContent>\n                    </Card>\n                    <Card data-testid=\"card-stat-posts\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"text-2xl font-bold text-foreground\">89</div>\n                        <div className=\"text-sm text-muted-foreground\">Posts</div>\n                      </CardContent>\n                    </Card>\n                    <Card data-testid=\"card-stat-revenue\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"text-2xl font-bold text-foreground\">$2,340</div>\n                        <div className=\"text-sm text-muted-foreground\">Revenue</div>\n                      </CardContent>\n                    </Card>\n                    <Card data-testid=\"card-stat-gigs\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"text-2xl font-bold text-foreground\">12</div>\n                        <div className=\"text-sm text-muted-foreground\">Active Gigs</div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n                \n                {/* Quick Actions */}\n                <div className=\"mt-6 lg:mt-0 lg:ml-8\">\n                  <div className=\"flex flex-col sm:flex-row lg:flex-col space-y-2 sm:space-y-0 sm:space-x-2 lg:space-x-0 lg:space-y-2\">\n                    <Button className=\"flex items-center\" data-testid=\"button-create-post\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Post\n                    </Button>\n                    <Button variant=\"secondary\" className=\"flex items-center\" data-testid=\"button-start-meeting\">\n                      <Video className=\"w-4 h-4 mr-2\" />\n                      Start Meeting\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Main Dashboard Content */}\n          <div className=\"p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              {/* Recent Activity & AI Assistant */}\n              <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n                {/* Recent Activity */}\n                <div className=\"lg:col-span-2\">\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle>Recent Activity</CardTitle>\n                        <Link href=\"/activity\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-activity\">\n                            View all\n                          </Button>\n                        </Link>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-start space-x-3 p-3 bg-muted/50 rounded-lg\" data-testid=\"activity-earnings\">\n                          <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                            <DollarSign className=\"w-4 h-4 text-green-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-foreground\">You earned <span className=\"font-semibold\">$150</span> from \"Logo Design Package\"</p>\n                            <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-start space-x-3 p-3 bg-muted/50 rounded-lg\" data-testid=\"activity-message\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <MessageSquare className=\"w-4 h-4 text-blue-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-foreground\">New message from <span className=\"font-semibold\">Sarah Johnson</span></p>\n                            <p className=\"text-xs text-muted-foreground\">5 hours ago</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-start space-x-3 p-3 bg-muted/50 rounded-lg\" data-testid=\"activity-likes\">\n                          <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                            <Sparkles className=\"w-4 h-4 text-purple-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-foreground\">Your blog post got <span className=\"font-semibold\">25 new likes</span></p>\n                            <p className=\"text-xs text-muted-foreground\">1 day ago</p>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* AI Assistant Card */}\n                <Card className=\"bg-gradient-to-br from-primary/10 to-secondary/20\" data-testid=\"card-ai-assistant\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                        <Sparkles className=\"w-5 h-5 text-primary-foreground\" />\n                      </div>\n                      <div>\n                        <CardTitle>Gemini AI Assistant</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">Powered by Gemini 2.5 Flash</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Get help with content creation, blog ideas, and more.</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start text-sm\" data-testid=\"button-suggest-blog-topics\">\n                        📝 Suggest blog topics\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start text-sm\" data-testid=\"button-improve-content\">\n                        ✨ Improve my content\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start text-sm\" data-testid=\"button-generate-ideas\">\n                        💡 Generate gig ideas\n                      </Button>\n                    </div>\n                    \n                    <Link href=\"/ai-assistant\">\n                      <Button className=\"w-full\" data-testid=\"button-open-ai-chat\">\n                        Open AI Chat\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Feature Modules Grid */}\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                {/* Social Feed Module */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-module-feed\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                        <MessageSquare className=\"w-5 h-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>Social Feed</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">Share posts and engage</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Create posts, share updates, and connect with your community.</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"text-xs text-muted-foreground\">Recent activity:</div>\n                      <div className=\"text-sm\">📸 3 new posts this week</div>\n                      <div className=\"text-sm\">❤️ 147 likes received</div>\n                    </div>\n                    \n                    <Link href=\"/feed\">\n                      <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-open-feed\">\n                        Open Feed\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n\n                {/* Digital Store Module */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-module-store\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                        <ShoppingBag className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>Digital Store</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">Sell digital products</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Upload and sell digital products with PayPal integration.</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"text-xs text-muted-foreground\">Store stats:</div>\n                      <div className=\"text-sm\">📦 8 products listed</div>\n                      <div className=\"text-sm\">💰 $1,240 total sales</div>\n                    </div>\n                    \n                    <Link href=\"/store\">\n                      <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-manage-store\">\n                        Manage Store\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n\n                {/* Freelance Gigs Module */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-module-gigs\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                        <Briefcase className=\"w-5 h-5 text-purple-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>Freelance Gigs</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">Offer your services</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Create gigs and offer freelance services to clients.</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"text-xs text-muted-foreground\">Gig performance:</div>\n                      <div className=\"text-sm\">🎯 5 active gigs</div>\n                      <div className=\"text-sm\">📈 12 pending orders</div>\n                    </div>\n                    \n                    <Link href=\"/gigs\">\n                      <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-gigs\">\n                        View Gigs\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n\n                {/* AI Blog Module */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-module-blog\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                        <BookOpen className=\"w-5 h-5 text-orange-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>AI Blog</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">AI-powered writing</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Create blog posts with AI assistance and markdown editor.</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"text-xs text-muted-foreground\">Content stats:</div>\n                      <div className=\"text-sm\">📝 15 blog posts</div>\n                      <div className=\"text-sm\">👀 2,340 total views</div>\n                    </div>\n                    \n                    <Link href=\"/blog\">\n                      <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-write-blog\">\n                        Write Blog\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n\n                {/* Messages Module */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-module-messages\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-indigo-100 rounded-lg flex items-center justify-center\">\n                        <MessageSquare className=\"w-5 h-5 text-indigo-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>Messages</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">Real-time chat</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Direct messaging with real-time notifications.</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"text-xs text-muted-foreground\">Recent messages:</div>\n                      <div className=\"text-sm\">💬 3 unread messages</div>\n                      <div className=\"text-sm\">👥 8 active chats</div>\n                    </div>\n                    \n                    <Link href=\"/chat\">\n                      <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-open-messages\">\n                        Open Messages\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n\n                {/* Calendar & Tasks Module */}\n                <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-module-calendar\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-teal-100 rounded-lg flex items-center justify-center\">\n                        <CalendarIcon className=\"w-5 h-5 text-teal-600\" />\n                      </div>\n                      <div>\n                        <CardTitle>Calendar & Tasks</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">Schedule & organize</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Manage your schedule and to-do list with AI suggestions.</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"text-xs text-muted-foreground\">Upcoming:</div>\n                      <div className=\"text-sm\">📅 2 meetings today</div>\n                      <div className=\"text-sm\">✅ 5 pending tasks</div>\n                    </div>\n                    \n                    <Link href=\"/calendar\">\n                      <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-view-calendar\">\n                        View Calendar\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Floating AI Chat Button */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Link href=\"/ai-assistant\">\n          <Button size=\"lg\" className=\"w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-shadow\" data-testid=\"button-floating-ai\">\n            <Sparkles className=\"w-6 h-6\" />\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full\"></div>\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20385},"client/src/pages/Feed.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport CreatePostModal from \"@/components/CreatePostModal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Heart,\n  MessageCircle,\n  Share2,\n  Plus,\n  MoreHorizontal\n} from \"lucide-react\";\n\nexport default function Feed() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  const [showCreatePost, setShowCreatePost] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch posts\n  const { data: posts, isLoading: postsLoading } = useQuery({\n    queryKey: [\"/api/posts\"],\n    enabled: isAuthenticated,\n  });\n\n  // Like post mutation\n  const likePostMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      return apiRequest(\"POST\", `/api/posts/${postId}/like`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to like post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLikePost = (postId: string) => {\n    likePostMutation.mutate(postId);\n  };\n\n  const formatRelativeTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours === 1) return \"1h\";\n    if (diffInHours < 24) return `${diffInHours}h`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays === 1) return \"1d\";\n    if (diffInDays < 7) return `${diffInDays}d`;\n    \n    return date.toLocaleDateString();\n  };\n\n  if (isLoading || postsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading feed...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"max-w-2xl mx-auto p-6\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-feed-title\">Social Feed</h1>\n              <Button onClick={() => setShowCreatePost(true)} data-testid=\"button-create-post\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Post\n              </Button>\n            </div>\n\n            {/* Posts */}\n            <div className=\"space-y-6\">\n              {posts && posts.length > 0 ? (\n                posts.map((post: any) => (\n                  <Card key={post.id} data-testid={`post-${post.id}`}>\n                    <CardContent className=\"p-6\">\n                      {/* Post Header */}\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar data-testid={`avatar-post-${post.id}`}>\n                            <AvatarImage src={post.user?.profileImageUrl} />\n                            <AvatarFallback>\n                              {post.user?.firstName?.[0]}{post.user?.lastName?.[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-semibold text-foreground\" data-testid={`text-author-${post.id}`}>\n                                {post.user?.firstName} {post.user?.lastName}\n                              </span>\n                              <span className=\"text-muted-foreground text-sm\">\n                                @{post.user?.email?.split('@')[0]}\n                              </span>\n                              <span className=\"text-muted-foreground text-sm\">·</span>\n                              <span className=\"text-muted-foreground text-sm\" data-testid={`text-time-${post.id}`}>\n                                {formatRelativeTime(post.createdAt)}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-${post.id}`}>\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n\n                      {/* Post Content */}\n                      <div className=\"mb-4\">\n                        <p className=\"text-foreground whitespace-pre-wrap\" data-testid={`text-content-${post.id}`}>\n                          {post.content}\n                        </p>\n                        {post.mediaUrl && (\n                          <img \n                            src={post.mediaUrl} \n                            alt=\"Post media\" \n                            className=\"w-full mt-3 rounded-lg border border-border\"\n                            data-testid={`img-media-${post.id}`}\n                          />\n                        )}\n                      </div>\n\n                      {/* Post Actions */}\n                      <div className=\"flex items-center space-x-6 pt-4 border-t border-border\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleLikePost(post.id)}\n                          className=\"text-muted-foreground hover:text-red-500 transition-colors\"\n                          data-testid={`button-like-${post.id}`}\n                        >\n                          <Heart className=\"w-4 h-4 mr-1\" />\n                          <span>{post.likes || 0}</span>\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          className=\"text-muted-foreground hover:text-blue-500 transition-colors\"\n                          data-testid={`button-comment-${post.id}`}\n                        >\n                          <MessageCircle className=\"w-4 h-4 mr-1\" />\n                          <span>{post.commentsCount || 0}</span>\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          className=\"text-muted-foreground hover:text-green-500 transition-colors\"\n                          data-testid={`button-share-${post.id}`}\n                        >\n                          <Share2 className=\"w-4 h-4 mr-1\" />\n                          <span>Share</span>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <Card data-testid=\"empty-feed\">\n                  <CardContent className=\"p-12 text-center\">\n                    <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <MessageCircle className=\"w-8 h-8 text-muted-foreground\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">No posts yet</h3>\n                    <p className=\"text-muted-foreground mb-4\">Be the first to share something with the community!</p>\n                    <Button onClick={() => setShowCreatePost(true)} data-testid=\"button-create-first-post\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Your First Post\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Create Post Modal */}\n      <CreatePostModal \n        open={showCreatePost} \n        onOpenChange={setShowCreatePost}\n        onPostCreated={() => {\n          queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n          setShowCreatePost(false);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":9612},"client/src/pages/Gigs.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport CreateGigModal from \"@/components/CreateGigModal\";\nimport PayPalButton from \"@/components/PayPalButton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus,\n  Search,\n  Briefcase,\n  DollarSign,\n  Clock,\n  Star,\n  TrendingUp,\n  Users,\n  CheckCircle\n} from \"lucide-react\";\n\nexport default function Gigs() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  const [showCreateGig, setShowCreateGig] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch gigs\n  const { data: gigs, isLoading: gigsLoading } = useQuery({\n    queryKey: [\"/api/gigs\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch user's gigs\n  const { data: userGigs } = useQuery({\n    queryKey: [\"/api/users/gigs\"],\n    enabled: isAuthenticated,\n  });\n\n  // Order gig mutation\n  const orderGigMutation = useMutation({\n    mutationFn: async (gigId: string) => {\n      return apiRequest(\"POST\", `/api/gigs/${gigId}/order`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Gig order created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/gigs\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create gig order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categories = [\n    { value: \"all\", label: \"All Categories\" },\n    { value: \"design\", label: \"Design & Graphics\" },\n    { value: \"development\", label: \"Programming\" },\n    { value: \"writing\", label: \"Writing & Translation\" },\n    { value: \"marketing\", label: \"Digital Marketing\" },\n    { value: \"video\", label: \"Video & Animation\" },\n    { value: \"business\", label: \"Business\" },\n  ];\n\n  const filteredGigs = gigs?.filter((gig: any) => {\n    const matchesSearch = gig.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         gig.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || gig.category === selectedCategory;\n    return matchesSearch && matchesCategory && gig.active;\n  }) || [];\n\n  if (isLoading || gigsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading gigs...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              {/* Header */}\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-gigs-title\">\n                    Freelance Gigs\n                  </h1>\n                  <p className=\"text-muted-foreground\">Offer your services and find great freelancers</p>\n                </div>\n                <div className=\"mt-4 md:mt-0 flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search gigs...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10 w-64\"\n                      data-testid=\"input-search-gigs\"\n                    />\n                  </div>\n                  <Button \n                    onClick={() => setShowCreateGig(true)}\n                    data-testid=\"button-create-gig\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Gig\n                  </Button>\n                </div>\n              </div>\n\n              {/* Gig Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n                <Card data-testid=\"card-stat-total-gigs\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <Briefcase className=\"w-5 h-5 text-primary mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">{gigs?.length || 0}</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Available Gigs</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-my-gigs\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <Users className=\"w-5 h-5 text-green-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">{userGigs?.length || 0}</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">My Gigs</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-total-orders\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <CheckCircle className=\"w-5 h-5 text-blue-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">\n                        {gigs?.reduce((total: number, gig: any) => total + (gig.orders || 0), 0) || 0}\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-avg-price\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <DollarSign className=\"w-5 h-5 text-yellow-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">\n                        ${gigs?.length > 0 ? (gigs.reduce((total: number, gig: any) => total + parseFloat(gig.price || 0), 0) / gigs.length).toFixed(0) : 0}\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Avg Price</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Category Filter */}\n              <div className=\"flex flex-wrap gap-2 mb-8\">\n                {categories.map((category) => (\n                  <Button\n                    key={category.value}\n                    variant={selectedCategory === category.value ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedCategory(category.value)}\n                    data-testid={`button-category-${category.value}`}\n                  >\n                    {category.label}\n                  </Button>\n                ))}\n              </div>\n\n              {/* Gigs Grid */}\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredGigs.length > 0 ? (\n                  filteredGigs.map((gig: any) => (\n                    <Card key={gig.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`gig-${gig.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-start space-x-3\">\n                          <Avatar className=\"w-10 h-10\" data-testid={`avatar-gig-${gig.id}`}>\n                            <AvatarImage src={gig.user?.profileImageUrl} />\n                            <AvatarFallback>\n                              {gig.user?.firstName?.[0]}{gig.user?.lastName?.[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <span className=\"font-semibold text-sm\" data-testid={`text-seller-${gig.id}`}>\n                                {gig.user?.firstName} {gig.user?.lastName}\n                              </span>\n                              <div className=\"flex items-center space-x-1\">\n                                <Star className=\"w-3 h-3 text-yellow-500 fill-current\" />\n                                <span className=\"text-xs text-muted-foreground\" data-testid={`text-rating-${gig.id}`}>\n                                  {parseFloat(gig.rating || 0).toFixed(1)}\n                                </span>\n                              </div>\n                            </div>\n                            <CardTitle className=\"text-lg line-clamp-2\" data-testid={`text-gig-title-${gig.id}`}>\n                              {gig.title}\n                            </CardTitle>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-muted-foreground text-sm mb-4 line-clamp-3\" data-testid={`text-description-${gig.id}`}>\n                          {gig.description}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between mb-4\">\n                          {gig.category && (\n                            <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-category-${gig.id}`}>\n                              {gig.category}\n                            </Badge>\n                          )}\n                          <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                            <Clock className=\"w-4 h-4\" />\n                            <span data-testid={`text-delivery-${gig.id}`}>\n                              {gig.deliveryTime} day{gig.deliveryTime !== 1 ? 's' : ''}\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between mb-4\">\n                          <div className=\"text-xl font-bold text-foreground\" data-testid={`text-price-${gig.id}`}>\n                            Starting at ${parseFloat(gig.price).toFixed(2)}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\" data-testid={`text-orders-${gig.id}`}>\n                            {gig.orders || 0} order{gig.orders !== 1 ? 's' : ''}\n                          </div>\n                        </div>\n                        \n                        {/* Only show order button if not own gig */}\n                        {gig.userId !== user?.id ? (\n                          <PayPalButton\n                            amount={gig.price}\n                            currency=\"USD\"\n                            intent=\"CAPTURE\"\n                          />\n                        ) : (\n                          <Button \n                            variant=\"outline\" \n                            className=\"w-full\"\n                            data-testid={`button-edit-gig-${gig.id}`}\n                          >\n                            Edit Gig\n                          </Button>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"col-span-full\" data-testid=\"empty-gigs\">\n                    <Card>\n                      <CardContent className=\"p-12 text-center\">\n                        <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                          <Briefcase className=\"w-8 h-8 text-muted-foreground\" />\n                        </div>\n                        <h3 className=\"text-lg font-semibold text-foreground mb-2\">No gigs found</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          {searchQuery || selectedCategory !== \"all\" \n                            ? \"Try adjusting your search or filter.\" \n                            : \"Start offering your services to earn money!\"}\n                        </p>\n                        <Button \n                          onClick={() => setShowCreateGig(true)}\n                          data-testid=\"button-create-first-gig\"\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Create Your First Gig\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Create Gig Modal */}\n      <CreateGigModal\n        open={showCreateGig}\n        onOpenChange={setShowCreateGig}\n        onGigCreated={() => {\n          queryClient.invalidateQueries({ queryKey: [\"/api/gigs\"] });\n          queryClient.invalidateQueries({ queryKey: [\"/api/users/gigs\"] });\n          setShowCreateGig(false);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":14927},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Star, \n  MessageSquare, \n  ShoppingBag, \n  Briefcase, \n  BookOpen, \n  Calendar,\n  Video,\n  Sparkles,\n  Users,\n  TrendingUp,\n  Shield,\n  Zap\n} from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Star className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">InfinityHub</span>\n              <Badge variant=\"secondary\">v2.5</Badge>\n            </div>\n            <Button \n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-login\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n              Your Complete Digital\n              <span className=\"block text-primary\">Platform</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\">\n              Combine social media, AI-powered content creation, digital marketplace, \n              freelance platform, and productivity tools in one powerful super app.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                onClick={() => window.location.href = \"/api/login\"}\n                data-testid=\"button-get-started\"\n                className=\"text-lg px-8 py-4\"\n              >\n                Get Started Free\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                data-testid=\"button-learn-more\"\n                className=\"text-lg px-8 py-4\"\n              >\n                Learn More\n              </Button>\n            </div>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 mb-16\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-users-count\">10K+</div>\n              <div className=\"text-muted-foreground\">Active Users</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-products-count\">5K+</div>\n              <div className=\"text-muted-foreground\">Digital Products</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-gigs-count\">2K+</div>\n              <div className=\"text-muted-foreground\">Active Gigs</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-revenue-count\">$500K+</div>\n              <div className=\"text-muted-foreground\">Creator Revenue</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n              Everything You Need in One Platform\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Stop juggling multiple apps. InfinityHub combines all essential tools \n              for modern creators and entrepreneurs.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Social Feed */}\n            <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-feature-social\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                  <MessageSquare className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <CardTitle>Social Feed</CardTitle>\n                <CardDescription>\n                  Share posts, engage with community, and build your following\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Image & video posts</li>\n                  <li>• Real-time engagement</li>\n                  <li>• Hashtag discovery</li>\n                  <li>• Community building</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* AI Blog */}\n            <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-feature-blog\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                  <BookOpen className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <CardTitle>AI-Powered Blog</CardTitle>\n                <CardDescription>\n                  Create amazing content with Gemini 2.5 Flash assistance\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• AI content generation</li>\n                  <li>• Markdown editor</li>\n                  <li>• SEO optimization</li>\n                  <li>• Publishing tools</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Digital Store */}\n            <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-feature-store\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                  <ShoppingBag className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <CardTitle>Digital Store</CardTitle>\n                <CardDescription>\n                  Sell digital products with PayPal integration\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• File upload & delivery</li>\n                  <li>• PayPal checkout</li>\n                  <li>• Sales analytics</li>\n                  <li>• Customer management</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Freelance Gigs */}\n            <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-feature-gigs\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Briefcase className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <CardTitle>Freelance Gigs</CardTitle>\n                <CardDescription>\n                  Offer services and manage client projects\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Service listings</li>\n                  <li>• Order management</li>\n                  <li>• Payment processing</li>\n                  <li>• Client communication</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Real-time Chat */}\n            <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-feature-chat\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"w-6 h-6 text-indigo-600\" />\n                </div>\n                <CardTitle>Real-time Chat</CardTitle>\n                <CardDescription>\n                  Direct messaging with instant notifications\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Instant messaging</li>\n                  <li>• File sharing</li>\n                  <li>• Read receipts</li>\n                  <li>• Typing indicators</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* AI Assistant */}\n            <Card className=\"hover:shadow-lg transition-shadow\" data-testid=\"card-feature-ai\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-pink-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Sparkles className=\"w-6 h-6 text-pink-600\" />\n                </div>\n                <CardTitle>AI Assistant</CardTitle>\n                <CardDescription>\n                  Get help with content ideas and business decisions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Content suggestions</li>\n                  <li>• Business advice</li>\n                  <li>• Task automation</li>\n                  <li>• Creative ideas</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n              Why Choose InfinityHub?\n            </h2>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\" data-testid=\"benefit-all-in-one\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Zap className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-4\">All-in-One Solution</h3>\n              <p className=\"text-muted-foreground\">\n                Replace multiple subscriptions with one comprehensive platform \n                that handles everything from social media to payments.\n              </p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"benefit-ai-powered\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <TrendingUp className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-4\">AI-Powered Growth</h3>\n              <p className=\"text-muted-foreground\">\n                Leverage Gemini 2.5 Flash AI to create better content, \n                generate ideas, and grow your business faster.\n              </p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"benefit-secure\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Shield className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-4\">Secure & Reliable</h3>\n              <p className=\"text-muted-foreground\">\n                Enterprise-grade security with PayPal integration \n                ensures your data and payments are always protected.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-primary\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-primary-foreground mb-6\">\n            Ready to Transform Your Digital Presence?\n          </h2>\n          <p className=\"text-xl text-primary-foreground/90 mb-8\">\n            Join thousands of creators and entrepreneurs who are already \n            building their success with InfinityHub.\n          </p>\n          <Button \n            size=\"lg\" \n            variant=\"secondary\"\n            onClick={() => window.location.href = \"/api/login\"}\n            data-testid=\"button-start-free-trial\"\n            className=\"text-lg px-8 py-4\"\n          >\n            Start Your Free Trial\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Star className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">InfinityHub</span>\n              <Badge variant=\"secondary\">v2.5</Badge>\n            </div>\n            <p className=\"text-muted-foreground text-center md:text-right\">\n              © 2024 InfinityHub. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":14000},"client/src/pages/Profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  User,\n  Globe,\n  Twitter,\n  Instagram,\n  Github,\n  Linkedin,\n  ExternalLink,\n  Edit3,\n  Save,\n  X\n} from \"lucide-react\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // Check if we're viewing someone else's profile\n  const [match, params] = useRoute(\"/u/:username\");\n  const isOwnProfile = !match;\n  const username = params?.username;\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [editData, setEditData] = useState({\n    bio: \"\",\n    socialLinks: {\n      website: \"\",\n      twitter: \"\",\n      instagram: \"\",\n      github: \"\",\n      linkedin: \"\",\n    }\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch profile data\n  const { data: profileData, isLoading: profileLoading } = useQuery({\n    queryKey: isOwnProfile ? [\"/api/auth/user\"] : [\"/api/users\", username],\n    enabled: isAuthenticated && (isOwnProfile || !!username),\n  });\n\n  // Fetch user's posts\n  const { data: userPosts } = useQuery({\n    queryKey: [\"/api/users\", profileData?.id, \"posts\"],\n    enabled: !!profileData?.id,\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"PATCH\", \"/api/auth/user\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (profileData && isOwnProfile) {\n      setEditData({\n        bio: profileData.bio || \"\",\n        socialLinks: profileData.socialLinks || {\n          website: \"\",\n          twitter: \"\",\n          instagram: \"\",\n          github: \"\",\n          linkedin: \"\",\n        }\n      });\n    }\n  }, [profileData, isOwnProfile]);\n\n  const handleSaveProfile = () => {\n    updateProfileMutation.mutate(editData);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    if (profileData) {\n      setEditData({\n        bio: profileData.bio || \"\",\n        socialLinks: profileData.socialLinks || {\n          website: \"\",\n          twitter: \"\",\n          instagram: \"\",\n          github: \"\",\n          linkedin: \"\",\n        }\n      });\n    }\n  };\n\n  if (isLoading || profileLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (!profileData) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"flex-1 p-6\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h1 className=\"text-2xl font-bold text-foreground mb-4\">Profile Not Found</h1>\n              <p className=\"text-muted-foreground\">The user you're looking for doesn't exist.</p>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"p-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              {/* Profile Header */}\n              <Card className=\"mb-8\" data-testid=\"card-profile-header\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex flex-col md:flex-row items-start md:items-center space-y-4 md:space-y-0 md:space-x-6\">\n                    <Avatar className=\"w-24 h-24\" data-testid=\"img-profile-avatar\">\n                      <AvatarImage src={profileData.profileImageUrl} />\n                      <AvatarFallback className=\"text-2xl\">\n                        {profileData.firstName?.[0]}{profileData.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-profile-name\">\n                          {profileData.firstName} {profileData.lastName}\n                        </h1>\n                        {isOwnProfile && (\n                          <div className=\"flex items-center space-x-2\">\n                            {isEditing ? (\n                              <>\n                                <Button \n                                  size=\"sm\" \n                                  onClick={handleSaveProfile}\n                                  disabled={updateProfileMutation.isPending}\n                                  data-testid=\"button-save-profile\"\n                                >\n                                  <Save className=\"w-4 h-4 mr-2\" />\n                                  Save\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\" \n                                  onClick={handleCancelEdit}\n                                  data-testid=\"button-cancel-edit\"\n                                >\n                                  <X className=\"w-4 h-4 mr-2\" />\n                                  Cancel\n                                </Button>\n                              </>\n                            ) : (\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\" \n                                onClick={() => setIsEditing(true)}\n                                data-testid=\"button-edit-profile\"\n                              >\n                                <Edit3 className=\"w-4 h-4 mr-2\" />\n                                Edit Profile\n                              </Button>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                      \n                      <p className=\"text-muted-foreground mb-4\" data-testid=\"text-profile-email\">\n                        {profileData.email}\n                      </p>\n                      \n                      {/* Bio */}\n                      <div className=\"mb-4\">\n                        {isEditing ? (\n                          <Textarea\n                            value={editData.bio}\n                            onChange={(e) => setEditData(prev => ({ ...prev, bio: e.target.value }))}\n                            placeholder=\"Tell us about yourself...\"\n                            className=\"min-h-[80px]\"\n                            data-testid=\"input-bio\"\n                          />\n                        ) : (\n                          <p className=\"text-foreground\" data-testid=\"text-bio\">\n                            {profileData.bio || \"No bio available.\"}\n                          </p>\n                        )}\n                      </div>\n                      \n                      {/* Social Links */}\n                      <div className=\"flex flex-wrap gap-4\">\n                        {isEditing ? (\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 w-full\">\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">Website</label>\n                              <Input\n                                value={editData.socialLinks.website}\n                                onChange={(e) => setEditData(prev => ({\n                                  ...prev,\n                                  socialLinks: { ...prev.socialLinks, website: e.target.value }\n                                }))}\n                                placeholder=\"https://your-website.com\"\n                                data-testid=\"input-website\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">Twitter</label>\n                              <Input\n                                value={editData.socialLinks.twitter}\n                                onChange={(e) => setEditData(prev => ({\n                                  ...prev,\n                                  socialLinks: { ...prev.socialLinks, twitter: e.target.value }\n                                }))}\n                                placeholder=\"@username\"\n                                data-testid=\"input-twitter\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">Instagram</label>\n                              <Input\n                                value={editData.socialLinks.instagram}\n                                onChange={(e) => setEditData(prev => ({\n                                  ...prev,\n                                  socialLinks: { ...prev.socialLinks, instagram: e.target.value }\n                                }))}\n                                placeholder=\"@username\"\n                                data-testid=\"input-instagram\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">GitHub</label>\n                              <Input\n                                value={editData.socialLinks.github}\n                                onChange={(e) => setEditData(prev => ({\n                                  ...prev,\n                                  socialLinks: { ...prev.socialLinks, github: e.target.value }\n                                }))}\n                                placeholder=\"username\"\n                                data-testid=\"input-github\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">LinkedIn</label>\n                              <Input\n                                value={editData.socialLinks.linkedin}\n                                onChange={(e) => setEditData(prev => ({\n                                  ...prev,\n                                  socialLinks: { ...prev.socialLinks, linkedin: e.target.value }\n                                }))}\n                                placeholder=\"username\"\n                                data-testid=\"input-linkedin\"\n                              />\n                            </div>\n                          </div>\n                        ) : (\n                          <>\n                            {profileData.socialLinks?.website && (\n                              <a \n                                href={profileData.socialLinks.website} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"flex items-center space-x-2 text-primary hover:text-primary/80\"\n                                data-testid=\"link-website\"\n                              >\n                                <Globe className=\"w-4 h-4\" />\n                                <span>Website</span>\n                                <ExternalLink className=\"w-3 h-3\" />\n                              </a>\n                            )}\n                            {profileData.socialLinks?.twitter && (\n                              <a \n                                href={`https://twitter.com/${profileData.socialLinks.twitter.replace('@', '')}`} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"flex items-center space-x-2 text-primary hover:text-primary/80\"\n                                data-testid=\"link-twitter\"\n                              >\n                                <Twitter className=\"w-4 h-4\" />\n                                <span>Twitter</span>\n                                <ExternalLink className=\"w-3 h-3\" />\n                              </a>\n                            )}\n                            {profileData.socialLinks?.instagram && (\n                              <a \n                                href={`https://instagram.com/${profileData.socialLinks.instagram.replace('@', '')}`} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"flex items-center space-x-2 text-primary hover:text-primary/80\"\n                                data-testid=\"link-instagram\"\n                              >\n                                <Instagram className=\"w-4 h-4\" />\n                                <span>Instagram</span>\n                                <ExternalLink className=\"w-3 h-3\" />\n                              </a>\n                            )}\n                            {profileData.socialLinks?.github && (\n                              <a \n                                href={`https://github.com/${profileData.socialLinks.github}`} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"flex items-center space-x-2 text-primary hover:text-primary/80\"\n                                data-testid=\"link-github\"\n                              >\n                                <Github className=\"w-4 h-4\" />\n                                <span>GitHub</span>\n                                <ExternalLink className=\"w-3 h-3\" />\n                              </a>\n                            )}\n                            {profileData.socialLinks?.linkedin && (\n                              <a \n                                href={`https://linkedin.com/in/${profileData.socialLinks.linkedin}`} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"flex items-center space-x-2 text-primary hover:text-primary/80\"\n                                data-testid=\"link-linkedin\"\n                              >\n                                <Linkedin className=\"w-4 h-4\" />\n                                <span>LinkedIn</span>\n                                <ExternalLink className=\"w-3 h-3\" />\n                              </a>\n                            )}\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n                <Card data-testid=\"card-stat-posts\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">{userPosts?.length || 0}</div>\n                    <div className=\"text-sm text-muted-foreground\">Posts</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-followers\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">1,234</div>\n                    <div className=\"text-sm text-muted-foreground\">Followers</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-following\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">567</div>\n                    <div className=\"text-sm text-muted-foreground\">Following</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-likes\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">8.9K</div>\n                    <div className=\"text-sm text-muted-foreground\">Likes</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Posts Grid */}\n              <Card data-testid=\"card-user-posts\">\n                <CardHeader>\n                  <CardTitle>Posts</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {userPosts && userPosts.length > 0 ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {userPosts.map((post: any) => (\n                        <div key={post.id} className=\"border border-border rounded-lg p-4\" data-testid={`post-${post.id}`}>\n                          <p className=\"text-foreground mb-2\">{post.content}</p>\n                          {post.mediaUrl && (\n                            <img \n                              src={post.mediaUrl} \n                              alt=\"Post media\" \n                              className=\"w-full h-48 object-cover rounded-lg mb-2\"\n                              data-testid={`img-post-media-${post.id}`}\n                            />\n                          )}\n                          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                            <span>{post.likes} likes</span>\n                            <span>{post.commentsCount} comments</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\" data-testid=\"empty-posts\">\n                      <p className=\"text-muted-foreground\">No posts yet.</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19975},"client/src/pages/Store.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport CreateProductModal from \"@/components/CreateProductModal\";\nimport PayPalButton from \"@/components/PayPalButton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Plus,\n  Search,\n  ShoppingBag,\n  DollarSign,\n  Package,\n  TrendingUp,\n  Star,\n  Download\n} from \"lucide-react\";\n\nexport default function Store() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [showCreateProduct, setShowCreateProduct] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch products\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch user's products\n  const { data: userProducts } = useQuery({\n    queryKey: [\"/api/users/products\"],\n    enabled: isAuthenticated,\n  });\n\n  const categories = [\n    { value: \"all\", label: \"All Categories\" },\n    { value: \"ebooks\", label: \"eBooks\" },\n    { value: \"courses\", label: \"Courses\" },\n    { value: \"templates\", label: \"Templates\" },\n    { value: \"software\", label: \"Software\" },\n    { value: \"graphics\", label: \"Graphics\" },\n    { value: \"audio\", label: \"Audio\" },\n  ];\n\n  const filteredProducts = products?.filter((product: any) => {\n    const matchesSearch = product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  }) || [];\n\n  if (isLoading || productsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading store...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 min-h-screen bg-background\">\n          <div className=\"p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              {/* Header */}\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-store-title\">\n                    Digital Store\n                  </h1>\n                  <p className=\"text-muted-foreground\">Sell your digital products with PayPal integration</p>\n                </div>\n                <div className=\"mt-4 md:mt-0 flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search products...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10 w-64\"\n                      data-testid=\"input-search-products\"\n                    />\n                  </div>\n                  <Button \n                    onClick={() => setShowCreateProduct(true)}\n                    data-testid=\"button-create-product\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Product\n                  </Button>\n                </div>\n              </div>\n\n              {/* Store Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n                <Card data-testid=\"card-stat-total-products\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <Package className=\"w-5 h-5 text-primary mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">{products?.length || 0}</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Products</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-my-products\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <ShoppingBag className=\"w-5 h-5 text-green-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">{userProducts?.length || 0}</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">My Products</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-total-sales\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <DollarSign className=\"w-5 h-5 text-yellow-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">\n                        ${products?.reduce((total: number, product: any) => total + (product.sales || 0) * parseFloat(product.price || 0), 0).toFixed(0) || 0}\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Sales</div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-stat-avg-rating\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"flex items-center justify-center mb-2\">\n                      <Star className=\"w-5 h-5 text-orange-600 mr-2\" />\n                      <div className=\"text-2xl font-bold text-foreground\">4.8</div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Avg Rating</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Category Filter */}\n              <div className=\"flex flex-wrap gap-2 mb-8\">\n                {categories.map((category) => (\n                  <Button\n                    key={category.value}\n                    variant={selectedCategory === category.value ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedCategory(category.value)}\n                    data-testid={`button-category-${category.value}`}\n                  >\n                    {category.label}\n                  </Button>\n                ))}\n              </div>\n\n              {/* Products Grid */}\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredProducts.length > 0 ? (\n                  filteredProducts.map((product: any) => (\n                    <Card key={product.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`product-${product.id}`}>\n                      <div className=\"aspect-video bg-muted rounded-t-lg overflow-hidden\">\n                        {product.imageUrl ? (\n                          <img \n                            src={product.imageUrl} \n                            alt={product.title}\n                            className=\"w-full h-full object-cover\"\n                            data-testid={`img-product-${product.id}`}\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <Package className=\"w-12 h-12 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </div>\n                      <CardHeader className=\"pb-2\">\n                        <div className=\"flex items-start justify-between\">\n                          <CardTitle className=\"text-lg line-clamp-2\" data-testid={`text-product-title-${product.id}`}>\n                            {product.title}\n                          </CardTitle>\n                          {product.category && (\n                            <Badge variant=\"outline\" className=\"text-xs ml-2\" data-testid={`badge-category-${product.id}`}>\n                              {product.category}\n                            </Badge>\n                          )}\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\" data-testid={`text-description-${product.id}`}>\n                          {product.description}\n                        </p>\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <div className=\"text-2xl font-bold text-foreground\" data-testid={`text-price-${product.id}`}>\n                            ${parseFloat(product.price).toFixed(2)}\n                          </div>\n                          <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                            <Download className=\"w-4 h-4\" />\n                            <span data-testid={`text-sales-${product.id}`}>{product.sales || 0} sales</span>\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <PayPalButton\n                            amount={product.price}\n                            currency=\"USD\"\n                            intent=\"CAPTURE\"\n                          />\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"w-full\"\n                            data-testid={`button-preview-${product.id}`}\n                          >\n                            Preview\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"col-span-full\" data-testid=\"empty-products\">\n                    <Card>\n                      <CardContent className=\"p-12 text-center\">\n                        <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                          <ShoppingBag className=\"w-8 h-8 text-muted-foreground\" />\n                        </div>\n                        <h3 className=\"text-lg font-semibold text-foreground mb-2\">No products found</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          {searchQuery || selectedCategory !== \"all\" \n                            ? \"Try adjusting your search or filter.\" \n                            : \"Start selling your digital products today!\"}\n                        </p>\n                        <Button \n                          onClick={() => setShowCreateProduct(true)}\n                          data-testid=\"button-create-first-product\"\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Your First Product\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Create Product Modal */}\n      <CreateProductModal\n        open={showCreateProduct}\n        onOpenChange={setShowCreateProduct}\n        onProductCreated={() => {\n          queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n          queryClient.invalidateQueries({ queryKey: [\"/api/users/products\"] });\n          setShowCreateProduct(false);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":12938},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}